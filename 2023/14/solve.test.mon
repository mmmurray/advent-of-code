import { assertEqual } from "@assert";
import { List, listFromArray } from "@list";
import { Vec2 } from "@math";
import { String, stringFromNumber } from "@string";
import { getValue: getInput } from "./input.txt";

data Grid = {
  size: Vec2<i32>,
  cols: List<List<i32>>,
}

let parseInput = (input: String): Grid -> {
  let lines = (input.trim()).toLines();
  let cols = [];
  let size = Vec2.New({ x: (lines.get(0)).size(), y: lines.size() });

  for _, colIndex in (lines.get(0)).toList() {
    let col = [];

    for line in lines {
      col.push(line.get(colIndex));
    }

    cols.push(col);
  }

  Grid.New({ size: size, cols: cols })
}

let tiltColumn = (col: List<i32>): List<i32> -> {
  let newCol = col.clone();
  let nextFreeIndex = 0;

  for tile, colIndex in col {
    let _ = case {
      (tile == '#') -> {
        nextFreeIndex = (colIndex + 1);

        newCol.set(colIndex, '#');
      };
      _ -> {
        let _ = case {
          (tile == 'O') -> {
            newCol.set(colIndex, '.');
            newCol.set(nextFreeIndex, 'O');

            nextFreeIndex = (nextFreeIndex + 1);
          };
          _ -> {
            newCol.set(colIndex, '.');
          };
        };
      };
    };
  }

  newCol
}

let tiltGrid = (grid: Grid): Grid -> {
  let newCols = [];

  for col in grid.cols {
    newCols.push(tiltColumn(col));
  }

  Grid.New({ size: grid.size, cols: newCols })
}

let calculateLoad = (grid: Grid): i32 -> {
  let totalLoad = 0;
  let size = grid.size;

  for col in grid.cols {
    for tile, rowIndex in col {
      let _ = case {
        (tile == 'O') -> {
          totalLoad = (totalLoad + (size.y - rowIndex));
        };
        _ -> {};
      };
    }
  }

  totalLoad
}

let rotateGridClockwise = (grid: Grid): Grid -> {
  let newCols = [];
  let size = grid.size;
  let rowIndex = (size.y - 1);

  while (rowIndex >= 0) {
    let newCol = [];

    for col, colIndex in grid.cols {
      newCol.push(col.get(rowIndex));
    }

    newCols.push(newCol);

    rowIndex = (rowIndex - 1);
  }

  Grid.New({ size: size, cols: newCols })
}

let performSpinCycle = (grid: Grid): Grid -> {
  grid = tiltGrid(grid);
  grid = rotateGridClockwise(grid);
  grid = tiltGrid(grid);
  grid = rotateGridClockwise(grid);
  grid = tiltGrid(grid);
  grid = rotateGridClockwise(grid);
  grid = tiltGrid(grid);
  grid = rotateGridClockwise(grid);

  grid
}

let areColsEqual = (a: List<i32>, b: List<i32>): boolean -> {
  let result = true;

  for v1, i in a {
    let v2 = b.get(i);
    let _ = case {
      (v1 != v2) -> {
        result = false;
      };
      _ -> {};
    };
  }

  result
}

let areGridsEqual = (a: Grid, b: Grid): boolean -> {
  let result = true;

  for c1, i in a.cols {
    let c2 = b.cols.get(i);
    let _ = case {
      !(areColsEqual(c1, c2)) -> {
        result = false;
      };
      _ -> {};
    };
  }

  result
}

let solvePart1 = (input: String): String -> {
  let grid = parseInput(input);
  let tiltedGrid = tiltGrid(grid);
  let result = calculateLoad(tiltedGrid);

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let grid = parseInput(input);
  let grids = [];
  let totalCycles = 1000000000;
  let cycleOffset = --(1);
  let i = 0;

  while ((cycleOffset < 0) && (i < totalCycles)) {
    grid = performSpinCycle(grid);

    for otherGrid, otherGridIndex in grids {
      let _ = case {
        areGridsEqual(grid, otherGrid) -> {
          cycleOffset = otherGridIndex;
        };
        _ -> {};
      };
    }

    let _ = case {
      (cycleOffset < 0) -> {
        grids.push(grid);

        i = (i + 1);
      };
      _ -> {};
    };
  }

  let cycleLength = (grids.size() - cycleOffset);
  let gridIndex = (cycleOffset + (((totalCycles - 1) - cycleOffset) % cycleLength));
  let result = calculateLoad(grids.get(gridIndex));

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqual(part1, "109345");

let part2 = solvePart2(input);

assertEqual(part2, "112452");
