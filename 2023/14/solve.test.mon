import { _type_Array, arrayCreate, arrayGet, arraySet } from "@array";
import { assertEqual, assertEqualString } from "@assert";
import { fileRead, print } from "@io";
import {
  _type_List,
  listClone,
  listFromArray,
  listFromString,
  listGet,
  listPop,
  listPush,
  listPushList,
  listSet,
  listSize,
  listSlice,
} from "@list";
import { _type_Map, mapCreate, mapEntries, mapGet, mapSet, mapSize } from "@map";
import {
  Vec2,
  _type_Vec2,
  lcmMany,
  max,
  min,
  vec2Add,
  vec2Equals,
  vec2IsAdjacent,
  vec2ManhattanDistance,
} from "@math";
import { optionValue } from "@option";
import { _type_Range, rangeCreate, rangeEmpty, rangeIntersect, rangeShift } from "@range";
import {
  charIsNumeric,
  charToString,
  stringBuilderAppend,
  stringBuilderBuild,
  stringBuilderCreate,
  stringConcat,
  stringContainsAt,
  stringEquals,
  stringFromNumber,
  stringGet,
  stringSize,
  stringSlice,
  stringSplitBy,
  stringToLines,
  stringToNumber,
  stringToNumberU64,
  stringTrim,
} from "@string";
import { _type_String } from "@string-base";

let vec2ToString = (v: Vec2<i32>): String -> {
  let out = (stringBuilderCreate 16);

  (stringBuilderAppend out "[");
  (stringBuilderAppend out (stringFromNumber v.x));
  (stringBuilderAppend out ", ");
  (stringBuilderAppend out (stringFromNumber v.y));
  (stringBuilderAppend out "]");

  return (stringBuilderBuild out);
}

data Grid = {
  size: Vec2<i32>,
  cols: List<List<i32> >,
}

let parseInput = (input: String): Grid -> {
  let lines = (stringToLines (stringTrim input));
  let cols = [];
  let size = (Vec2 { x: (stringSize (listGet lines 0)), y: (listSize lines) });

  for c, colIndex in (listFromString (listGet lines 0)) {
    let col = [];

    for line in lines {
      (listPush col (stringGet line colIndex));
    }

    (listPush cols col);
  }

  return (Grid { size: size, cols: cols });
}

let printGrid = (grid: Grid): unit -> {
  let out = (stringBuilderCreate 1024);
  let size = grid.size;

  (stringBuilderAppend out "Size: ");
  (stringBuilderAppend out (vec2ToString size));
  (stringBuilderAppend out "\n");

  let y = 0;

  while (< y size.y) {
    let x = 0;

    while (< x size.x) {
      let value = (listGet (listGet grid.cols x) y);

      (stringBuilderAppend out (charToString value));

      x = (+ x 1);
    }

    (stringBuilderAppend out "\n");

    y = (+ y 1);
  }

  (print (stringBuilderBuild out));
}

let tiltColumn = (col: List<i32>): List<i32> -> {
  let newCol = (listClone col);
  let nextFreeIndex = 0;

  for tile, colIndex in col {
    if (== tile '#') {
      nextFreeIndex = (+ colIndex 1);

      (listSet newCol colIndex '#');
    } else {
      if (== tile 'O') {
        (listSet newCol colIndex '.');
        (listSet newCol nextFreeIndex 'O');

        nextFreeIndex = (+ nextFreeIndex 1);
      } else {
        (listSet newCol colIndex '.');
      }
    }
  }

  return newCol;
}

let tiltGrid = (grid: Grid): Grid -> {
  let newCols = [];

  for col in grid.cols {
    (listPush newCols (tiltColumn col));
  }

  return (Grid { size: grid.size, cols: newCols });
}

let calculateLoad = (grid: Grid): i32 -> {
  let totalLoad = 0;
  let size = grid.size;

  for col in grid.cols {
    for tile, rowIndex in col {
      if (== tile 'O') {
        totalLoad = (+ totalLoad (- size.y rowIndex));
      }
    }
  }

  return totalLoad;
}

let rotateGridClockwise = (grid: Grid): Grid -> {
  let newCols = [];
  let size = grid.size;
  let rowIndex = (- size.y 1);

  while (>= rowIndex 0) {
    let newCol = [];

    for col, colIndex in grid.cols {
      (listPush newCol (listGet col rowIndex));
    }

    (listPush newCols newCol);

    rowIndex = (- rowIndex 1);
  }

  return (Grid { size: size, cols: newCols });
}

let performSpinCycle = (grid: Grid): Grid -> {
  grid = (tiltGrid grid);
  grid = (rotateGridClockwise grid);
  grid = (tiltGrid grid);
  grid = (rotateGridClockwise grid);
  grid = (tiltGrid grid);
  grid = (rotateGridClockwise grid);
  grid = (tiltGrid grid);
  grid = (rotateGridClockwise grid);

  return grid;
}

let areColsEqual = (a: List<i32>, b: List<i32>): boolean -> {
  let result = true;

  for v1, i in a {
    let v2 = (listGet b i);

    if (!= v1 v2) {
      result = false;
    }
  }

  return result;
}

let areGridsEqual = (a: Grid, b: Grid): boolean -> {
  let result = true;

  for c1, i in a.cols {
    let c2 = (listGet b.cols i);

    if (!(areColsEqual c1 c2)) {
      result = false;
    }
  }

  return result;
}

let solvePart1 = (input: String): String -> {
  let grid = (parseInput input);
  let tiltedGrid = (tiltGrid grid);
  let result = (calculateLoad tiltedGrid);

  return (stringFromNumber result);
}

let solvePart2 = (input: String): String -> {
  let grid = (parseInput input);
  let grids = [];
  let totalCycles = 1000000000;
  let cycleOffset = -1;
  let i = 0;
  let loop = false;

  while (&& (< cycleOffset 0) (< i totalCycles)) {
    grid = (performSpinCycle grid);

    for otherGrid, otherGridIndex in grids {
      if (areGridsEqual grid otherGrid) {
        cycleOffset = otherGridIndex;
      }
    }

    if (< cycleOffset 0) {
      (listPush grids grid);

      i = (+ i 1);
    }
  }

  let cycleLength = (- (listSize grids) cycleOffset);
  let gridIndex = (+ cycleOffset (% (- (- totalCycles 1) cycleOffset) cycleLength));
  let result = (calculateLoad (listGet grids gridIndex));

  return (stringFromNumber result);
}

let main = (): unit -> {
  let input = (fileRead "input.txt");
  let part1 = (solvePart1 input);

  (print "Part 1:");
  (print part1);
  (assertEqualString part1 "109345");

  let part2 = (solvePart2 input);

  (print "Part 2:");
  (print part2);
  (assertEqualString part2 "112452");
}
