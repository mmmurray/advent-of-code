import { assert-equal } from "@assert";
import { list, list-from-array } from "@list";
import { vec2 } from "@math";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

data grid = { cols: list<list<i32>>, size: vec2<i32> }

let parse-input = (input: string): grid -> {
  let lines = (input.trim()).to-lines();
  let cols = [];
  let size = vec2.new({ x: (lines.get(0)).size(), y: lines.size() });

  for _, col-index in (lines.get(0)).to-list() {
    let col = [];

    for line in lines {
      col.push(line.get(col-index));
    }

    cols.push(col);
  }

  grid.new({ size: size, cols: cols })
}

let tilt-column = (col: list<i32>): list<i32> -> {
  let new-col = col.clone();
  let next-free-index = 0;

  for tile, col-index in col {
    let _ = case {
      tile == '#' -> {
        next-free-index = col-index + 1;

        new-col.set(col-index, '#');
      };
      _ -> {
        let _ = case {
          tile == 'O' -> {
            new-col.set(col-index, '.');
            new-col.set(next-free-index, 'O');

            next-free-index = next-free-index + 1;
          };
          _ -> {
            new-col.set(col-index, '.');
          };
        };
      };
    };
  }

  new-col
}

let tilt-grid = (g: grid): grid -> {
  let new-cols = [];

  for col in g.cols {
    new-cols.push(tilt-column(col));
  }

  grid.new({ size: g.size, cols: new-cols })
}

let calculate-load = (g: grid): i32 -> {
  let total-load = 0;
  let size = g.size;

  for col in g.cols {
    for tile, row-index in col {
      let _ = case {
        tile == 'O' -> {
          total-load = total-load + (size.y - row-index);
        };
        _ -> {};
      };
    }
  }

  total-load
}

let rotate-grid-clockwise = (g: grid): grid -> {
  let new-cols = [];
  let size = g.size;
  let row-index = size.y - 1;

  while row-index >= 0 {
    let new-col = [];

    for col, col-index in g.cols {
      new-col.push(col.get(row-index));
    }

    new-cols.push(new-col);

    row-index = row-index - 1;
  }

  grid.new({ size: size, cols: new-cols })
}

let perform-spin-cycle = (g: grid): grid -> {
  g = tilt-grid(g);
  g = rotate-grid-clockwise(g);
  g = tilt-grid(g);
  g = rotate-grid-clockwise(g);
  g = tilt-grid(g);
  g = rotate-grid-clockwise(g);
  g = tilt-grid(g);
  g = rotate-grid-clockwise(g);

  g
}

let are-cols-equal = (a: list<i32>, b: list<i32>): boolean -> {
  let result = true;

  for v1, i in a {
    let v2 = b.get(i);
    let _ = case {
      v1 != v2 -> {
        result = false;
      };
      _ -> {};
    };
  }

  result
}

let are-grids-equal = (a: grid, b: grid): boolean -> {
  let result = true;

  for c1, i in a.cols {
    let c2 = b.cols.get(i);
    let _ = case {
      !(are-cols-equal(c1, c2)) -> {
        result = false;
      };
      _ -> {};
    };
  }

  result
}

let solve-part1 = (input: string): string -> {
  let g = parse-input(input);
  let tilted-grid = tilt-grid(g);
  let result = calculate-load(tilted-grid);

  string-from-number(result)
}

let solve-part2 = (input: string): string -> {
  let g = parse-input(input);
  let grids = [];
  let total-cycles = 1000000000;
  let cycle-offset = --(1);
  let i = 0;

  while (cycle-offset < 0) && (i < total-cycles) {
    g = perform-spin-cycle(g);

    for other-grid, other-grid-index in grids {
      let _ = case {
        are-grids-equal(g, other-grid) -> {
          cycle-offset = other-grid-index;
        };
        _ -> {};
      };
    }

    let _ = case {
      cycle-offset < 0 -> {
        grids.push(g);

        i = i + 1;
      };
      _ -> {};
    };
  }

  let cycle-length = grids.size() - cycle-offset;
  let grid-index = cycle-offset + (((total-cycles - 1) - cycle-offset) % cycle-length);
  let result = calculate-load(grids.get(grid-index));

  string-from-number(result)
}

let input = get-input();
let part1 = solve-part1(input);

assert-equal(part1, "109345");

let part2 = solve-part2(input);

assert-equal(part2, "112452");
