import { assertEqualString } from "@assert";
import { print } from "@io";
import { _type_List, listFromArray, listGet, listPush, listSize, listSlice } from "@list";
import { _type_Map, mapCreate, mapSet } from "@map";
import { lcmMany } from "@math";
import {
  _type_String,
  stringFromNumber,
  stringGet,
  stringSlice,
  stringToArray,
  stringToLines,
  stringTrim,
} from "@string";
import { getValue: getInput } from "./input.txt";

data Node = {
  left: String,
  right: String,
}

data Network = {
  instructions: List<boolean>,
  nodes: Map<String, Node>,
}

let parseInput = (input: String): Network -> {
  let instructions = [];
  let nodes = mapCreate();
  let lines = stringToLines(stringTrim(input));
  let instructionsLine = listGet(lines, 0);

  for char in listFromArray(stringToArray(instructionsLine)) {
    let instruction = false;

    if (char == 'L') {
      instruction = true;
    }

    listPush(instructions, instruction);
  }

  let nodesLines = listSlice(lines, 2, listSize(lines));

  for nodeLine in nodesLines {
    let name = stringSlice(nodeLine, 0, 3);
    let left = stringSlice(nodeLine, 7, 10);
    let right = stringSlice(nodeLine, 12, 15);
    let node = Node({ left: left, right: right });

    mapSet(nodes, name, node);
  }

  Network({ instructions: instructions, nodes: nodes })
}

let countSteps = (network: Network, start: String): u64 -> {
  let instructionIndex = 0;
  let current = start;
  let steps = 0;
  let loop = true;

  while loop {
    let instruction = listGet(network.instructions, instructionIndex);
    let node = (network.nodes).get(current);
    let _ = match node {
      Some { value } -> {
        if instruction {
          current = value.left;
        } else {
          current = value.right;
        }
      };
      None -> print("Node not found");
    };

    instructionIndex = ((instructionIndex + 1) % listSize(network.instructions));
    steps = (steps + 1);

    if (stringGet(current, 2) == 'Z') {
      loop = false;
    }
  }

  steps
}

let solvePart1 = (input: String): String -> {
  let network = parseInput(input);
  let result = countSteps(network, "AAA");

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let network = parseInput(input);
  let nodes = network.nodes;
  let allSteps = [];

  for item in nodes.entries() {
    if (stringGet(item.key, 2) == 'A') {
      listPush(allSteps, countSteps(network, item.key));
    }
  }

  let result = lcmMany(allSteps);

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqualString(part1, "21883");

let part2 = solvePart2(input);

assertEqualString(part2, "12833235391111");
