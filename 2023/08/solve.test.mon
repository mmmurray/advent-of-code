import { assertEqual } from "@assert";
import { print } from "@io";
import { List, listFromArray } from "@list";
import { Map, mapCreate } from "@map";
import { lcmMany } from "@math";
import { String, stringFromNumber } from "@string";
import { getValue: getInput } from "./input.txt";

data Node = {
  left: String,
  right: String,
}

data Network = {
  instructions: List<boolean>,
  nodes: Map<String, Node>,
}

let parseInput = (input: String): Network -> {
  let instructions = [];
  let nodes = mapCreate();
  let lines = (input.trim()).toLines();
  let instructionsLine = lines.get(0);

  for char in instructionsLine.toList() {
    let instruction = false;
    let _ = case {
      char == 'L' -> {
        instruction = true;
      };
      _ -> {};
    };

    instructions.push(instruction);
  }

  let nodesLines = lines.slice(2, lines.size());

  for nodeLine in nodesLines {
    let name = nodeLine.slice(0, 3);
    let left = nodeLine.slice(7, 10);
    let right = nodeLine.slice(12, 15);
    let node = Node.New({ left: left, right: right });

    nodes.set(name, node);
  }

  Network.New({ instructions: instructions, nodes: nodes })
}

let countSteps = (network: Network, start: String): u64 -> {
  let instructionIndex = 0;
  let current = start;
  let steps = 0;
  let loop = true;

  while loop {
    let instruction = network.instructions.get(instructionIndex);
    let node = network.nodes.get(current);
    let _ = match node {
      Some { value } -> {
        let _ = case {
          instruction -> {
            current = value.left;
          };
          _ -> {
            current = value.right;
          };
        };
      };
      None -> print("Node not found");
    };

    instructionIndex = (instructionIndex + 1) % network.instructions.size();
    steps = steps + 1;

    let _ = case {
      current.get(2) == 'Z' -> {
        loop = false;
      };
      _ -> {};
    };
  }

  steps
}

let solvePart1 = (input: String): String -> {
  let network = parseInput(input);
  let result = countSteps(network, "AAA");

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let network = parseInput(input);
  let nodes = network.nodes;
  let allSteps = [];

  for item in nodes.entries() {
    let _ = case {
      item.key.get(2) == 'A' -> {
        allSteps.push(countSteps(network, item.key));
      };
      _ -> {};
    };
  }

  let result = lcmMany(allSteps);

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqual(part1, "21883");

let part2 = solvePart2(input);

assertEqual(part2, "12833235391111");
