import { assert-equal } from "@assert";
import { print } from "@io";
import { list } from "@list";
import { map, map-create } from "@map";
import { lcm-many } from "@math";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

data node = { left: string, right: string }

data network = { instructions: list<boolean>, nodes: map<string, node> }

let parse-input = (input: string): network -> {
  let instructions = [];
  let nodes = map-create();
  let lines = (input.trim()).to-lines();
  let instructions-line = lines.get(0);

  for char in instructions-line.to-list() {
    let instruction = false;
    let _ = case {
      char ==  'L'  -> {
        instruction = true;
      };
      _ -> {};
    };

    instructions.push(instruction);
  }

  let nodes-lines = lines.slice(2, lines.size());

  for node-line in nodes-lines {
    let name = node-line.slice(0, 3);
    let left = node-line.slice(7, 10);
    let right = node-line.slice(12, 15);
    let n = node.new({ left: left, right: right });

    nodes.set(name, n);
  }

  network.new({ instructions: instructions, nodes: nodes })
}

let count-steps = (net: network, start: string): u64 -> {
  let instruction-index = 0;
  let current = start;
  let steps = 0;
  let loop = true;

  while loop {
    let instruction = net.instructions.get(instruction-index);
    let n = net.nodes.get(current);
    let _ = match n {
      some({ value }) -> {
        let _ = case {
          instruction -> {
            current = value.left;
          };
          _ -> {
            current = value.right;
          };
        };
      };
      none -> print("Node not found");
    };

    instruction-index = (instruction-index + 1) % net.instructions.size();
    steps = steps + 1;

    let _ = case {
      current.get(2) ==  'Z'  -> {
        loop = false;
      };
      _ -> {};
    };
  }

  steps
}

let solve-part-1 = (input: string): string -> {
  let n = parse-input(input);
  let result = count-steps(n, "AAA");

  string-from-number(result)
}

let solve-part-2 = (input: string): string -> {
  let n = parse-input(input);
  let nodes = n.nodes;
  let all-steps = [];

  for item in nodes.entries() {
    let _ = case {
      item.key.get(2) ==  'A'  -> {
        all-steps.push(count-steps(n, item.key));
      };
      _ -> {};
    };
  }

  let result = lcm-many(all-steps);

  string-from-number(result)
}

let input = get-input();
let part1 = solve-part-1(input);

assert-equal(part1, "21883");

let part2 = solve-part-2(input);

assert-equal(part2, "12833235391111");
