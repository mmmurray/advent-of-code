data Node {
  left: String,
  right: String,
}

data Network {
  instructions: List<boolean>,
  nodes: Map<Node>,
}

let parseInput = (input: String): Network -> {
  let instructions = (listCreateDefault<boolean>)
  let nodes = (mapCreate<Node>)
  let lines = (stringToLines (stringTrim input))
  let instructionsLine = (listGet lines 0)

  for char in instructionsLine {
    let instruction = false
    if (== char 'L') {
      instruction = true
    }
    (listPush instructions instruction)
  }

  let nodesLines = (listSlice lines 2 (listSize lines))
  for nodeLine in nodesLines {
    let name = (stringSlice nodeLine 0 3)
    let left = (stringSlice nodeLine 7 10)
    let right = (stringSlice nodeLine 12 15)
    let node = Node {
      left: left,
      right: right,
    }
    (mapSet nodes name node)
  }

  return Network {
    instructions: instructions,
    nodes: nodes,
  }
}

let countSteps = (network: Network, start: String): i32 -> {
  let instructionIndex = 0
  let current = start
  let steps = 0

  while true {
    let instruction = (listGet network.instructions instructionIndex)
    let node = (mapGet network.nodes current)

    let m = match node {
      Some { value } -> void {
        if instruction {
          current = value.left
        } else {
          current = value.right
        }
      };
      None -> void {
        ($panic "Node not found")
      };
    }

    instructionIndex = (% (+ instructionIndex 1) (listSize network.instructions))
    steps = (+ steps 1)

    if (== (stringGet current 2) 'Z') {
      break
    }
  }

  return steps
}

let solvePart1 = (input: String): String -> {
  let network = (parseInput input)
  let result = (countSteps network "AAA")

  return (stringFromNumber result)
}

let solvePart2 = (input: String): String -> {
  let network = (parseInput input)
  let nodes = network.nodes
  let allSteps = (listCreateDefault<i32>)

  for item in nodes.items {
    if (== (stringGet item.key 2) 'A') {
      (listPush allSteps (countSteps network item.key))
    }
  }

  let result = (lcmMany allSteps)

  return (stringFromNumber result)
}

let main = (): void -> {
  let input = (fileRead "input.txt")

  let part1 = (solvePart1 input)
  (print "Part 1:")
  (print part1)
  (assertEqualString part1 "21883")

  let part2 = (solvePart2 input)
  (print "Part 2:")
  (print part2)
  (assertEqualString part2 "12833235391111")
}
