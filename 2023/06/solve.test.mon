import { assert-equal } from "@assert";
import { list } from "@list";
import { string, string-from-number } from "@string";
import { string-builder-create } from "@string-builder";
import { get-value: get-input } from "./input.txt";

data race = { distance: u64, time: u64 }

let parse-number-list = (input: string): list<u64> -> {
  let values = [];
  let parts = input.split-by( ' ' );

  for part in parts {
    let _ = case {
      part.size() > 0 -> {
        let num = part.to-u64();

        values.push(num);
      };
      _ -> {};
    };
  }

  values
}

let parse-input = (input: string): list<race> -> {
  let races = [];
  let lines = input.to-lines();
  let times-line = lines.get(0);
  let distances-line = lines.get(1);
  let times = parse-number-list((times-line.split-by( ':' )).get(1));
  let distances = parse-number-list((distances-line.split-by( ':' )).get(1));

  for time, time-index in times {
    let r = race.new({ time: time, distance: distances.get(time-index) });

    races.push(r);
  }

  races
}

let solve-race = (r: race): u64 -> {
  let winning-strategies = 0;
  let hold-time = 0;

  while hold-time <= r.time {
    let speed = hold-time;
    let remaining-time = r.time - hold-time;
    let distance = remaining-time * speed;
    let _ = case {
      distance > r.distance -> {
        winning-strategies = winning-strategies + 1;
      };
      _ -> {};
    };

    hold-time = hold-time + 1;
  }

  winning-strategies
}

let solve-part-1 = (input: string): string -> {
  let races = parse-input(input);
  let result = 1;

  for r in races {
    let winning-strategies = solve-race(r);

    result = result * winning-strategies;
  }

  string-from-number(result)
}

let solve-part-2 = (input: string): string -> {
  let races = parse-input(input);
  let combined-times = string-builder-create();
  let combined-distances = string-builder-create();

  for r in races {
    combined-times.append(string-from-number(r.time));
    combined-distances.append(string-from-number(r.distance));
  }

  let combined-race = race.new({
    time: (combined-times.build()).to-u64(),
    distance: (combined-distances.build()).to-u64(),
  });
  let result = solve-race(combined-race);

  string-from-number(result)
}

let input = get-input();
let part1 = solve-part-1(input);

assert-equal(part1, "1413720");

let part2 = solve-part-2(input);

assert-equal(part2, "30565288");
