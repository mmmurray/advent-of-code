import { assertEqualString } from "@assert";
import { _type_List, listGet, listPush } from "@list";
import {
  _type_String,
  stringFromNumber,
  stringSize,
  stringSplitBy,
  stringToLines,
  stringToNumberU64,
} from "@string";
import { stringBuilderCreate } from "@string-builder";
import { getValue: getInput } from "./input.txt";

data Race = {
  time: u64,
  distance: u64,
}

let parseNumberList = (input: String): List<u64> -> {
  let values = [];
  let parts = stringSplitBy(input, ' ');

  for part in parts {
    if (stringSize(part) > 0) {
      let num = stringToNumberU64(part);

      listPush(values, num);
    }
  }

  values
}

let parseInput = (input: String): List<Race> -> {
  let races = [];
  let lines = stringToLines(input);
  let timesLine = listGet(lines, 0);
  let distancesLine = listGet(lines, 1);
  let times = parseNumberList(listGet(stringSplitBy(timesLine, ':'), 1));
  let distances = parseNumberList(listGet(stringSplitBy(distancesLine, ':'), 1));

  for time, timeIndex in times {
    let race = Race({ time: time, distance: listGet(distances, timeIndex) });

    listPush(races, race);
  }

  races
}

let solveRace = (race: Race): u64 -> {
  let winningStrategies = 0;
  let holdTime = 0;

  while (holdTime <= race.time) {
    let speed = holdTime;
    let remainingTime = (race.time - holdTime);
    let distance = (remainingTime * speed);

    if (distance > race.distance) {
      winningStrategies = (winningStrategies + 1);
    }

    holdTime = (holdTime + 1);
  }

  winningStrategies
}

let solvePart1 = (input: String): String -> {
  let races = parseInput(input);
  let result = 1;

  for race in races {
    let winningStrategies = solveRace(race);

    result = (result * winningStrategies);
  }

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let races = parseInput(input);
  let combinedTimes = stringBuilderCreate(128);
  let combinedDistances = stringBuilderCreate(128);

  for race in races {
    combinedTimes.append(stringFromNumber(race.time));
    combinedDistances.append(stringFromNumber(race.distance));
  }

  let combinedRace = Race({
    time: stringToNumberU64(combinedTimes.build()),
    distance: stringToNumberU64(combinedDistances.build()),
  });
  let result = solveRace(combinedRace);

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqualString(part1, "1413720");

let part2 = solvePart2(input);

assertEqualString(part2, "30565288");
