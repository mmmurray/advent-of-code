import { assertEqualString } from "@assert";
import { List } from "@list";
import { String, stringFromNumber } from "@string";
import { stringBuilderCreate } from "@string-builder";
import { getValue: getInput } from "./input.txt";

data Race = {
  time: u64,
  distance: u64,
}

let parseNumberList = (input: String): List<u64> -> {
  let values = [];
  let parts = input.splitBy(' ');

  for part in parts {
    if (part.size() > 0) {
      let num = part.toU64();

      values.push(num);
    }
  }

  values
}

let parseInput = (input: String): List<Race> -> {
  let races = [];
  let lines = (input).toLines();
  let timesLine = lines.get(0);
  let distancesLine = lines.get(1);
  let times = parseNumberList((timesLine.splitBy(':')).get(1));
  let distances = parseNumberList((distancesLine.splitBy(':')).get(1));

  for time, timeIndex in times {
    let race = Race.New({ time: time, distance: distances.get(timeIndex) });

    races.push(race);
  }

  races
}

let solveRace = (race: Race): u64 -> {
  let winningStrategies = 0;
  let holdTime = 0;

  while (holdTime <= race.time) {
    let speed = holdTime;
    let remainingTime = (race.time - holdTime);
    let distance = (remainingTime * speed);

    if (distance > race.distance) {
      winningStrategies = (winningStrategies + 1);
    }

    holdTime = (holdTime + 1);
  }

  winningStrategies
}

let solvePart1 = (input: String): String -> {
  let races = parseInput(input);
  let result = 1;

  for race in races {
    let winningStrategies = solveRace(race);

    result = (result * winningStrategies);
  }

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let races = parseInput(input);
  let combinedTimes = stringBuilderCreate();
  let combinedDistances = stringBuilderCreate();

  for race in races {
    combinedTimes.append(stringFromNumber(race.time));
    combinedDistances.append(stringFromNumber(race.distance));
  }

  let combinedRace = Race.New({
    time: (combinedTimes.build()).toU64(),
    distance: (combinedDistances.build()).toU64(),
  });
  let result = solveRace(combinedRace);

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqualString(part1, "1413720");

let part2 = solvePart2(input);

assertEqualString(part2, "30565288");
