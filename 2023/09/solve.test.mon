import { assertEqualString } from "@assert";
import { List } from "@list";
import { String, stringFromNumber, stringToNumber } from "@string";
import { getValue: getInput } from "./input.txt";

let parseInput = (input: String): List<List<i32> > -> {
  let lines = (input.trim()).toLines();
  let sequences = [];

  for line in lines {
    let sequence = [];
    let parts = line.splitBy(' ');

    for part in parts {
      let value = stringToNumber(part);

      sequence.push(value);
    }

    sequences.push(sequence);
  }

  sequences
}

let findDeltas = (sequence: List<i32>): List<i32> -> {
  let deltas = [];

  for b, index in sequence {
    if (index > 0) {
      let a = sequence.get((index - 1));
      let delta = (b - a);

      deltas.push(delta);
    }
  }

  deltas
}

let isSequenceAllZero = (sequence: List<i32>): boolean -> {
  let allZero = true;

  for value in sequence {
    if (value != 0) {
      allZero = false;
    }
  }

  allZero
}

let findNextValue = (sequence: List<i32>): i32 -> {
  case {
    isSequenceAllZero(sequence) -> 0;
    _ -> {
      let lastValue = sequence.get((sequence.size() - 1));

      (lastValue + findNextValue(findDeltas(sequence)))
    };
  }
}

let findPreviousValue = (sequence: List<i32>): i32 -> {
  case {
    isSequenceAllZero(sequence) -> 0;
    _ -> {
      let firstValue = sequence.get(0);

      (firstValue - findPreviousValue(findDeltas(sequence)))
    };
  }
}

let solvePart1 = (input: String): String -> {
  let sequences = parseInput(input);
  let result = 0;

  for sequence in sequences {
    let nextValue = findNextValue(sequence);

    result = (result + nextValue);
  }

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let sequences = parseInput(input);
  let result = 0;

  for sequence in sequences {
    let previousValue = findPreviousValue(sequence);

    result = (result + previousValue);
  }

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqualString(part1, "1877825184");

let part2 = solvePart2(input);

assertEqualString(part2, "1108");
