import { assert-equal } from "@assert";
import { list } from "@list";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

let parse-input = (input: string): list<list<i32>> -> {
  let lines = (input.trim()).to-lines();
  let sequences = [];

  for line in lines {
    let sequence = [];
    let parts = line.split-by(" ");

    for part in parts {
      let value = part.to-i32();

      sequence.push(value);
    }

    sequences.push(sequence);
  }

  sequences
}

let find-deltas = (sequence: list<i32>): list<i32> -> {
  let deltas = [];

  for b, index in sequence {
    let _ = case {
      index > 0 -> {
        let a = sequence.get((index - 1));
        let delta = b - a;

        deltas.push(delta);
      };
      _ -> {};
    };
  }

  deltas
}

let is-sequence-all-zero = (sequence: list<i32>): boolean -> {
  let all-zero = true;

  for value in sequence {
    let _ = case {
      value != 0 -> {
        all-zero = false;
      };
      _ -> {};
    };
  }

  all-zero
}

let find-next-value = (sequence: list<i32>): i32 -> {
  case {
    is-sequence-all-zero(sequence) -> 0;
    _ -> {
      let last-value = sequence.get((sequence.size() - 1));

      last-value + find-next-value(find-deltas(sequence))
    };
  }
}

let find-previous-value = (sequence: list<i32>): i32 -> {
  case {
    is-sequence-all-zero(sequence) -> 0;
    _ -> {
      let first-value = sequence.get(0);

      first-value - find-previous-value(find-deltas(sequence))
    };
  }
}

let solve-part-1 = (input: string): string -> {
  let sequences = parse-input(input);
  let result = 0;

  for sequence in sequences {
    let next-value = find-next-value(sequence);

    result = result + next-value;
  }

  string-from-number(result)
}

let solve-part-2 = (input: string): string -> {
  let sequences = parse-input(input);
  let result = 0;

  for sequence in sequences {
    let previous-value = find-previous-value(sequence);

    result = result + previous-value;
  }

  string-from-number(result)
}

let input = get-input();
let part-1 = solve-part-1(input);

assert-equal(part-1, "1877825184");

let part-2 = solve-part-2(input);

assert-equal(part-2, "1108");
