import { assertEqualString } from "@assert";
import { _type_List, listFromArray, listGet, listPush, listSet, listSize } from "@list";
import { _type_Map, mapCreate } from "@map";
import {
  _type_String,
  charIsNumeric,
  stringFromNumber,
  stringSplitBy,
  stringToArray,
  stringToLines,
  stringToNumber,
  stringTrim,
} from "@string";
import { getValue: getInput } from "./input.txt";

data Hand = {
  cards: List<i32>,
  bid: i32,
  score: i32,
}

let isFiveOfAKind = (countByCard: Map<String, i32>): boolean -> {
  let result = false;

  for item1 in countByCard.entries() {
    if (item1.value == 5) {
      result = true;
    }
  }

  result
}

let isFourOfAKind = (countByCard: Map<String, i32>): boolean -> {
  let result = false;

  for item1 in countByCard.entries() {
    if (item1.value == 4) {
      result = true;
    }
  }

  result
}

let isThreeOfAKind = (countByCard: Map<String, i32>): boolean -> {
  let result = false;

  for item1 in countByCard.entries() {
    if (item1.value == 3) {
      result = true;
    }
  }

  result
}

let isFullHouse = (countByCard: Map<String, i32>): boolean -> {
  ((countByCard).size() == 2)
}

let isTwoPair = (countByCard: Map<String, i32>): boolean -> {
  ((countByCard).size() == 3)
}

let isOnePair = (countByCard: Map<String, i32>): boolean -> {
  ((countByCard).size() == 4)
}

let scoreCards = (cards: List<i32>): i32 -> {
  let countByCard = mapCreate();
  let jokers = 0;

  for card in cards {
    if (card == 1) {
      jokers = (jokers + 1);
    } else {
      let key = stringFromNumber(card);
      let current = (countByCard.get(key)).value(0);

      countByCard.set(key, (current + 1));
    }
  }

  let maxCount = 0;
  let maxCard = "2";

  for item0 in countByCard.entries() {
    if (item0.value > maxCount) {
      maxCount = item0.value;
      maxCard = item0.key;
    }
  }

  countByCard.set(maxCard, (maxCount + jokers));

  case {
    isFiveOfAKind(countByCard) -> 7;
    isFourOfAKind(countByCard) -> 6;
    isFullHouse(countByCard) -> 5;
    isThreeOfAKind(countByCard) -> 4;
    isTwoPair(countByCard) -> 3;
    isOnePair(countByCard) -> 2;
    _ -> 1;
  }

  1
}

let parseInput = (input: String, jokers: boolean): List<Hand> -> {
  let hands = [];
  let lines = stringToLines(stringTrim(input));

  for line in lines {
    let parts = stringSplitBy(line, ' ');
    let cardsPart = listGet(parts, 0);
    let bidPart = listGet(parts, 1);
    let cards = [];

    for cardChar in listFromArray(stringToArray(cardsPart)) {
      let card = 0;

      if (cardChar == 'A') {
        card = 14;
      }

      if (cardChar == 'K') {
        card = 13;
      }

      if (cardChar == 'Q') {
        card = 12;
      }

      if (cardChar == 'J') {
        if jokers {
          card = 1;
        } else {
          card = 11;
        }
      }

      if (cardChar == 'T') {
        card = 10;
      }

      if charIsNumeric(cardChar) {
        card = (cardChar - '0');
      }

      listPush(cards, card);
    }

    let hand = _type_Hand.New({ cards: cards, bid: stringToNumber(bidPart), score: scoreCards(cards) });

    listPush(hands, hand);
  }

  hands
}

let compareHands = (a: Hand, b: Hand): boolean -> {
  case {
    (a.score == b.score) -> {
      let result = false;
      let loop = true;

      for cardA, cardIndex in a.cards {
        if loop {
          let cardB = listGet(b.cards, cardIndex);

          if (cardA != cardB) {
            result = (cardA > cardB);
            loop = false;
          }
        }
      }

      result
    };
    _ -> (a.score > b.score);
  }
}

let sortHands = (hands: List<Hand>): List<Hand> -> {
  let endIndex = (listSize(hands) - 1);

  while (endIndex > 0) {
    let index = 0;

    while (index < endIndex) {
      let a = listGet(hands, index);
      let b = listGet(hands, (index + 1));

      if compareHands(a, b) {
        listSet(hands, index, b);
        listSet(hands, (index + 1), a);
      }

      index = (index + 1);
    }

    endIndex = (endIndex - 1);
  }

  hands
}

let scoreHands = (hands: List<Hand>): i32 -> {
  let result = 0;

  for hand, handIndex in hands {
    let rank = (handIndex + 1);

    result = (result + (rank * hand.bid));
  }

  result
}

let solvePart1 = (input: String): String -> {
  let hands = sortHands(parseInput(input, false));

  stringFromNumber(scoreHands(hands))
}

let solvePart2 = (input: String): String -> {
  let hands = sortHands(parseInput(input, true));

  stringFromNumber(scoreHands(hands))
}

let input = getInput();
let part1 = solvePart1(input);

assertEqualString(part1, "245794640");

let part2 = solvePart2(input);

assertEqualString(part2, "247899149");
