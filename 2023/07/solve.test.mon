import { assertEqual } from "@assert";
import { charIsNumeric } from "@char";
import { List, listFromArray } from "@list";
import { Map, mapCreate } from "@map";
import { String, stringFromNumber } from "@string";
import { getValue: getInput } from "./input.txt";

data Hand = { bid: i32, cards: List<i32>, score: i32 }

let isFiveOfAKind = (countByCard: Map<String, i32>): boolean -> {
  let result = false;

  for item1 in countByCard.entries() {
    let _ = case {
      item1.value == 5 -> {
        result = true;
      };
      _ -> {};
    };
  }

  result
}

let isFourOfAKind = (countByCard: Map<String, i32>): boolean -> {
  let result = false;

  for item1 in countByCard.entries() {
    let _ = case {
      item1.value == 4 -> {
        result = true;
      };
      _ -> {};
    };
  }

  result
}

let isThreeOfAKind = (countByCard: Map<String, i32>): boolean -> {
  let result = false;

  for item1 in countByCard.entries() {
    let _ = case {
      item1.value == 3 -> {
        result = true;
      };
      _ -> {};
    };
  }

  result
}

let isFullHouse = (countByCard: Map<String, i32>): boolean -> {
  countByCard.size() == 2
}

let isTwoPair = (countByCard: Map<String, i32>): boolean -> {
  countByCard.size() == 3
}

let isOnePair = (countByCard: Map<String, i32>): boolean -> {
  countByCard.size() == 4
}

let scoreCards = (cards: List<i32>): i32 -> {
  let countByCard = mapCreate();
  let jokers = 0;

  for card in cards {
    let _ = case {
      card == 1 -> {
        jokers = jokers + 1;
      };
      _ -> {
        let key = stringFromNumber(card);
        let current = (countByCard.get(key)).or(0);

        countByCard.set(key, (current + 1));
      };
    };
  }

  let maxCount = 0;
  let maxCard = "2";

  for item0 in countByCard.entries() {
    let _ = case {
      item0.value > maxCount -> {
        maxCount = item0.value;
        maxCard = item0.key;
      };
      _ -> {};
    };
  }

  countByCard.set(maxCard, (maxCount + jokers));

  case {
    isFiveOfAKind(countByCard) -> 7;
    isFourOfAKind(countByCard) -> 6;
    isFullHouse(countByCard) -> 5;
    isThreeOfAKind(countByCard) -> 4;
    isTwoPair(countByCard) -> 3;
    isOnePair(countByCard) -> 2;
    _ -> 1;
  }

  1
}

let parseInput = (input: String, jokers: boolean): List<Hand> -> {
  let hands = [];
  let lines = (input.trim()).toLines();

  for line in lines {
    let parts = line.splitBy(' ');
    let cardsPart = parts.get(0);
    let bidPart = parts.get(1);
    let cards = [];

    for cardChar in cardsPart.toList() {
      let card = 0;
      let _ = case {
        cardChar == 'A' -> {
          card = 14;
        };
        _ -> {};
      };
      let _ = case {
        cardChar == 'K' -> {
          card = 13;
        };
        _ -> {};
      };
      let _ = case {
        cardChar == 'Q' -> {
          card = 12;
        };
        _ -> {};
      };
      let _ = case {
        cardChar == 'J' -> {
          let _ = case {
            jokers -> {
              card = 1;
            };
            _ -> {
              card = 11;
            };
          };
        };
        _ -> {};
      };
      let _ = case {
        cardChar == 'T' -> {
          card = 10;
        };
        _ -> {};
      };
      let _ = case {
        charIsNumeric(cardChar) -> {
          card = cardChar - '0';
        };
        _ -> {};
      };

      cards.push(card);
    }

    let hand = Hand.New({ cards: cards, bid: bidPart.toI32(), score: scoreCards(cards) });

    hands.push(hand);
  }

  hands
}

let compareHands = (a: Hand, b: Hand): boolean -> {
  case {
    a.score == b.score -> {
      let result = false;
      let loop = true;

      for cardA, cardIndex in a.cards {
        let _ = case {
          loop -> {
            let cardB = b.cards.get(cardIndex);
            let _ = case {
              cardA != cardB -> {
                result = cardA > cardB;
                loop = false;
              };
              _ -> {};
            };
          };
          _ -> {};
        };
      }

      result
    };
    _ -> a.score > b.score;
  }
}

let sortHands = (hands: List<Hand>): List<Hand> -> {
  let endIndex = hands.size() - 1;

  while endIndex > 0 {
    let index = 0;

    while index < endIndex {
      let a = hands.get(index);
      let b = hands.get((index + 1));
      let _ = case {
        compareHands(a, b) -> {
          hands.set(index, b);
          hands.set((index + 1), a);
        };
        _ -> {};
      };

      index = index + 1;
    }

    endIndex = endIndex - 1;
  }

  hands
}

let scoreHands = (hands: List<Hand>): i32 -> {
  let result = 0;

  for hand, handIndex in hands {
    let rank = handIndex + 1;

    result = result + (rank * hand.bid);
  }

  result
}

let solvePart1 = (input: String): String -> {
  let hands = sortHands(parseInput(input, false));

  stringFromNumber(scoreHands(hands))
}

let solvePart2 = (input: String): String -> {
  let hands = sortHands(parseInput(input, true));

  stringFromNumber(scoreHands(hands))
}

let input = getInput();
let part1 = solvePart1(input);

assertEqual(part1, "245794640");

let part2 = solvePart2(input);

assertEqual(part2, "247899149");
