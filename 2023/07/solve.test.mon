import { assert-equal } from "@assert";
import { char-is-numeric } from "@char";
import { list, list-from-array } from "@list";
import { map, map-create } from "@map";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

data hand = { bid: i32, cards: list<i32>, score: i32 }

let is-five-of-a-kind = (count-by-card: map<string, i32>): boolean -> {
  let result = false;

  for item1 in count-by-card.entries() {
    let _ = case {
      item1.value == 5 -> {
        result = true;
      };
      _ -> {};
    };
  }

  result
}

let is-four-of-a-kind = (count-by-card: map<string, i32>): boolean -> {
  let result = false;

  for item1 in count-by-card.entries() {
    let _ = case {
      item1.value == 4 -> {
        result = true;
      };
      _ -> {};
    };
  }

  result
}

let is-three-of-a-kind = (count-by-card: map<string, i32>): boolean -> {
  let result = false;

  for item1 in count-by-card.entries() {
    let _ = case {
      item1.value == 3 -> {
        result = true;
      };
      _ -> {};
    };
  }

  result
}

let is-full-house = (count-by-card: map<string, i32>): boolean -> {
  count-by-card.size() == 2
}

let is-two-pair = (count-by-card: map<string, i32>): boolean -> {
  count-by-card.size() == 3
}

let is-one-pair = (count-by-card: map<string, i32>): boolean -> {
  count-by-card.size() == 4
}

let score-cards = (cards: list<i32>): i32 -> {
  let count-by-card = map-create();
  let jokers = 0;

  for card in cards {
    let _ = case {
      card == 1 -> {
        jokers = jokers + 1;
      };
      _ -> {
        let key = string-from-number(card);
        let current = (count-by-card.get(key)).or(0);

        count-by-card.set(key, (current + 1));
      };
    };
  }

  let max-count = 0;
  let max-card = "2";

  for item0 in count-by-card.entries() {
    let _ = case {
      item0.value > max-count -> {
        max-count = item0.value;
        max-card = item0.key;
      };
      _ -> {};
    };
  }

  count-by-card.set(max-card, (max-count + jokers));

  case {
    is-five-of-a-kind(count-by-card) -> 7;
    is-four-of-a-kind(count-by-card) -> 6;
    is-full-house(count-by-card) -> 5;
    is-three-of-a-kind(count-by-card) -> 4;
    is-two-pair(count-by-card) -> 3;
    is-one-pair(count-by-card) -> 2;
    _ -> 1;
  }

  1
}

let parse-input = (input: string, jokers: boolean): list<hand> -> {
  let hands = [];
  let lines = (input.trim()).to-lines();

  for line in lines {
    let parts = line.split-by(' ');
    let cards-part = parts.get(0);
    let bid-part = parts.get(1);
    let cards = [];

    for card-char in cards-part.to-list() {
      let card = 0;
      let _ = case {
        card-char == 'A' -> {
          card = 14;
        };
        _ -> {};
      };
      let _ = case {
        card-char == 'K' -> {
          card = 13;
        };
        _ -> {};
      };
      let _ = case {
        card-char == 'Q' -> {
          card = 12;
        };
        _ -> {};
      };
      let _ = case {
        card-char == 'J' -> {
          let _ = case {
            jokers -> {
              card = 1;
            };
            _ -> {
              card = 11;
            };
          };
        };
        _ -> {};
      };
      let _ = case {
        card-char == 'T' -> {
          card = 10;
        };
        _ -> {};
      };
      let _ = case {
        char-is-numeric(card-char) -> {
          card = card-char - '0';
        };
        _ -> {};
      };

      cards.push(card);
    }

    let h = hand.new({ cards: cards, bid: bid-part.to-i32(), score: score-cards(cards) });

    hands.push(h);
  }

  hands
}

let compare-hands = (a: hand, b: hand): boolean -> {
  case {
    a.score == b.score -> {
      let result = false;
      let loop = true;

      for card-a, card-index in a.cards {
        let _ = case {
          loop -> {
            let card-b = b.cards.get(card-index);
            let _ = case {
              card-a != card-b -> {
                result = card-a > card-b;
                loop = false;
              };
              _ -> {};
            };
          };
          _ -> {};
        };
      }

      result
    };
    _ -> a.score > b.score;
  }
}

let sort-hands = (hands: list<hand>): list<hand> -> {
  let end-index = hands.size() - 1;

  while end-index > 0 {
    let index = 0;

    while index < end-index {
      let a = hands.get(index);
      let b = hands.get((index + 1));
      let _ = case {
        compare-hands(a, b) -> {
          hands.set(index, b);
          hands.set((index + 1), a);
        };
        _ -> {};
      };

      index = index + 1;
    }

    end-index = end-index - 1;
  }

  hands
}

let score-hands = (hands: list<hand>): i32 -> {
  let result = 0;

  for h, hand-index in hands {
    let rank = hand-index + 1;

    result = result + (rank * h.bid);
  }

  result
}

let solve-part1 = (input: string): string -> {
  let hands = sort-hands(parse-input(input, false));

  string-from-number(score-hands(hands))
}

let solve-part2 = (input: string): string -> {
  let hands = sort-hands(parse-input(input, true));

  string-from-number(score-hands(hands))
}

let input = get-input();
let part1 = solve-part1(input);

assert-equal(part1, "245794640");

let part2 = solve-part2(input);

assert-equal(part2, "247899149");
