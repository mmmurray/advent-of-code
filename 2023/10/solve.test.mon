import { list } from "@list";
import { max } from "@math";
import { string, string-from-number } from "@string";
import { vec2, vec2-new } from "@vec2";
import { get-value: get-input } from "./input.txt";

data connections = { east: boolean, north: boolean, south: boolean, west: boolean }

data pipes = { grid: list<list<connections>>, size: vec2<i32>, start: vec2<i32> }

let char-to-connections = (char: i32): connections -> {
  case {
    char ==  '|'  -> connections.new({ north: true, east: false, south: true, west: false });
    char ==  '-'  -> connections.new({ north: false, east: true, south: false, west: true });
    char ==  'L'  -> connections.new({ north: true, east: true, south: false, west: false });
    char ==  'J'  -> connections.new({ north: true, east: false, south: false, west: true });
    char ==  '7'  -> connections.new({ north: false, east: false, south: true, west: true });
    char ==  'F'  -> connections.new({ north: false, east: true, south: true, west: false });
    char ==  'S'  -> connections.new({ north: true, east: true, south: true, west: true });
    _ -> connections.new({ north: false, east: false, south: false, west: false });
  }
}

let parse-input = (input: string): pipes -> {
  let lines = (input.trim()).to-lines();
  let grid = [];
  let start = vec2-new(0, 0);
  let size = vec2-new((lines.get(0)).size(), lines.size());

  for line, y in lines {
    let row = [];

    for char, x in line.to-list() {
      let connections = char-to-connections(char);

      row.push(connections);

      let _ = case {
        char ==  'S'  -> {
          start = vec2-new(x, y);
        };
        _ -> {};
      };
    }

    grid.push(row);
  }

  pipes.new({ grid: grid, start: start, size: size })
}

let connections-to-char = (cs: connections): i32 -> {
  case {
    !(cs.north) && (!(cs.east) && (!(cs.south) && !(cs.west))) ->  '.' ;
    cs.north && (cs.east && (cs.south && cs.west)) ->  'S' ;
    cs.north && cs.south ->  '║' ;
    cs.east && cs.west ->  '═' ;
    cs.south && cs.east ->  '╔' ;
    cs.west && cs.south ->  '╗' ;
    cs.north && cs.west ->  '╝' ;
    cs.east && cs.north ->  '╚' ;
    _ ->  ' ' ;
  }
}

let connections-to-walls = (cs: connections): list<list<i32>> -> {
  let walls = [];
  let char = connections-to-char(cs);
  let _ = case {
    char ==  '.'  -> {
      walls.push-list([[0, 0, 0], [0, 0, 0], [0, 0, 0]]);
    };
    _ -> {};
  };
  let _ = case {
    char ==  'S'  -> {
      walls.push-list([[0, 1, 0], [1, 1, 1], [0, 1, 0]]);
    };
    _ -> {};
  };
  let _ = case {
    char ==  '║'  -> {
      walls.push-list([[0, 1, 0], [0, 1, 0], [0, 1, 0]]);
    };
    _ -> {};
  };
  let _ = case {
    char ==  '═'  -> {
      walls.push-list([[0, 0, 0], [1, 1, 1], [0, 0, 0]]);
    };
    _ -> {};
  };
  let _ = case {
    char ==  '╔'  -> {
      walls.push-list([[0, 0, 0], [0, 1, 1], [0, 1, 0]]);
    };
    _ -> {};
  };
  let _ = case {
    char ==  '╗'  -> {
      walls.push-list([[0, 0, 0], [1, 1, 0], [0, 1, 0]]);
    };
    _ -> {};
  };
  let _ = case {
    char ==  '╝'  -> {
      walls.push-list([[0, 1, 0], [1, 1, 0], [0, 0, 0]]);
    };
    _ -> {};
  };
  let _ = case {
    char ==  '╚'  -> {
      walls.push-list([[0, 1, 0], [0, 1, 1], [0, 0, 0]]);
    };
    _ -> {};
  };

  walls
}

let get-connections = (ps: pipes, p: vec2<i32>): connections -> {
  (ps.grid.get(p.y)).get(p.x)
}

let points-contain = (points: list<vec2<i32>>, point: vec2<i32>): boolean -> {
  let result = false;

  for other in points {
    let _ = case {
      point.equals(other) -> {
        let result = true;
      };
      _ -> {};
    };
  }

  result
}

let search-pipes = (ps: pipes, visited: list<vec2<i32>>, current: vec2<i32>, steps: i32): i32 -> {
  case {
    points-contain(visited, current) -> steps;
    _ -> {
      let current-connections = get-connections(ps, current);

      visited.push(current);

      let size = ps.size;
      let max-steps = steps;
      let _ = case {
        current.y > 0 -> {
          let candidate = vec2-new(current.x, current.y - 1);
          let candidate-connections = get-connections(ps, candidate);
          let _ = case {
            current-connections.north && candidate-connections.south -> {
              let next-steps = search-pipes(ps, visited, candidate, (steps + 1));

              max-steps = max(max-steps, next-steps);
            };
            _ -> {};
          };
        };
        _ -> {};
      };
      let _ = case {
        current.x < (size.x - 1) -> {
          let candidate = vec2-new(current.x + 1, current.y);
          let candidate-connections = get-connections(ps, candidate);
          let _ = case {
            current-connections.east && candidate-connections.west -> {
              let next-steps = search-pipes(ps, visited, candidate, (steps + 1));

              max-steps = max(max-steps, next-steps);
            };
            _ -> {};
          };
        };
        _ -> {};
      };
      let _ = case {
        current.y < (size.y - 1) -> {
          let candidate = vec2-new(current.x, current.y + 1);
          let candidate-connections = get-connections(ps, candidate);
          let _ = case {
            current-connections.south && candidate-connections.north -> {
              let next-steps = search-pipes(ps, visited, candidate, (steps + 1));

              max-steps = max(max-steps, next-steps);
            };
            _ -> {};
          };
        };
        _ -> {};
      };
      let _ = case {
        current.x > 0 -> {
          let candidate = vec2-new(current.x - 1, current.y);
          let candidate-connections = get-connections(ps, candidate);
          let _ = case {
            current-connections.west && candidate-connections.east -> {
              let next-steps = search-pipes(ps, visited, candidate, (steps + 1));

              max-steps = max(max-steps, next-steps);
            };
            _ -> {};
          };
        };
        _ -> {};
      };

      max-steps
    };
  }
}

let _solve-part-1 = (input: string): string -> {
  let ps = parse-input(input);
  let steps = search-pipes(ps, [], ps.start, 0);
  let result = steps / 2;

  string-from-number(result)
}

data lake = { size: vec2<i32>, walls: list<list<i32>> }

let build-lake = (ps: pipes, visited: list<vec2<i32>>): lake -> {
  let walls = [];
  let pipes-size = ps.size;
  let lake-size = vec2-new(pipes-size.x * 3, pipes-size.y * 3);
  let y = 0;

  while y < lake-size.y {
    let row = [];
    let x = 0;

    while x < lake-size.x {
      row.push(0);

      x = x + 1;
    }

    walls.push(row);

    y = y + 1;
  }

  for p in visited {
    let cs = get-connections(ps, p);
    let connections-walls = connections-to-walls(cs);

    for crow, dy in connections-walls {
      for wall, dx in crow {
        let _ = case {
          wall == 1 -> {
            let row = walls.get(((p.y * 3) + dy));

            row.set(((p.x * 3) + dx), 1);
          };
          _ -> {};
        };
      }
    }
  }

  lake.new({ walls: walls, size: lake-size })
}

let _solve-part-2 = (input: string): string -> {
  let ps = parse-input(input);
  let pipes-size = ps.size;
  let visited = [];
  let steps = search-pipes(ps, visited, ps.start, 0);
  let lake = build-lake(ps, visited);
  let result = 0;
  let y = 0;

  while y < pipes-size.y {
    let x = 0;

    while x < pipes-size.x {
      let lx = (x * 3) + 1;
      let ly = (y * 3) + 1;
      let lv = (lake.walls.get(ly)).get(lx);
      let _ = case {
        lv == 0 -> {
          result = result + 1;
        };
        _ -> {};
      };

      x = x + 1;
    }

    y = y + 1;
  }

  string-from-number(result)
}

let _input = get-input();

# todo
# let part-1 = (solvePart1 input);
# (assertEqual part-1 "7107");
# todo
# let _ = (solvePart2 input);
# (assertEqual part-2 "281");
