import { List, listFromArray, listGet } from "@list";
import { Vec2, max, vec2Equals } from "@math";
import {
  String,
  stringFromNumber,
  stringSize,
  stringToArray,
  stringToLines,
  stringTrim,
} from "@string";
import { getValue: getInput } from "./input.txt";

data Connections = {
  north: boolean,
  east: boolean,
  south: boolean,
  west: boolean,
}

data Pipes = {
  start: Vec2<i32>,
  grid: List<List<Connections> >,
  size: Vec2<i32>,
}

let charToConnections = (char: i32): Connections -> {
  case {
    (char == '|') -> Connections.New({ north: true, east: false, south: true, west: false });
    (char == '-') -> Connections.New({ north: false, east: true, south: false, west: true });
    (char == 'L') -> Connections.New({ north: true, east: true, south: false, west: false });
    (char == 'J') -> Connections.New({ north: true, east: false, south: false, west: true });
    (char == '7') -> Connections.New({ north: false, east: false, south: true, west: true });
    (char == 'F') -> Connections.New({ north: false, east: true, south: true, west: false });
    (char == 'S') -> Connections.New({ north: true, east: true, south: true, west: true });
    _ -> Connections.New({ north: false, east: false, south: false, west: false });
  }
}

let parseInput = (input: String): Pipes -> {
  let lines = stringToLines(stringTrim(input));
  let grid = [];
  let start = Vec2.New({ x: 0, y: 0 });
  let size = Vec2.New({ x: stringSize(listGet(lines, 0)), y: lines.size() });

  for line, y in lines {
    let row = [];

    for char, x in listFromArray(stringToArray(line)) {
      let connections = charToConnections(char);

      row.push(connections);

      if (char == 'S') {
        start = Vec2.New({ x: x, y: y });
      }
    }

    grid.push(row);
  }

  Pipes.New({ grid: grid, start: start, size: size })
}

let connectionsToChar = (connections: Connections): i32 -> {
  case {
    (!(connections.north) && (!(connections.east) && (!(connections.south) && !(connections.west)))) -> '.';
    (connections.north && (connections.east && (connections.south && connections.west))) -> 'S';
    (connections.north && connections.south) -> '║';
    (connections.east && connections.west) -> '═';
    (connections.south && connections.east) -> '╔';
    (connections.west && connections.south) -> '╗';
    (connections.north && connections.west) -> '╝';
    (connections.east && connections.north) -> '╚';
    _ -> ' ';
  }
}

let connectionsToWalls = (connections: Connections): List<List<i32> > -> {
  let walls = [];
  let char = connectionsToChar(connections);

  if (char == '.') {
    walls.pushList([[0, 0, 0], [0, 0, 0], [0, 0, 0]]);
  }

  if (char == 'S') {
    walls.pushList([[0, 1, 0], [1, 1, 1], [0, 1, 0]]);
  }

  if (char == '║') {
    walls.pushList([[0, 1, 0], [0, 1, 0], [0, 1, 0]]);
  }

  if (char == '═') {
    walls.pushList([[0, 0, 0], [1, 1, 1], [0, 0, 0]]);
  }

  if (char == '╔') {
    walls.pushList([[0, 0, 0], [0, 1, 1], [0, 1, 0]]);
  }

  if (char == '╗') {
    walls.pushList([[0, 0, 0], [1, 1, 0], [0, 1, 0]]);
  }

  if (char == '╝') {
    walls.pushList([[0, 1, 0], [1, 1, 0], [0, 0, 0]]);
  }

  if (char == '╚') {
    walls.pushList([[0, 1, 0], [0, 1, 1], [0, 0, 0]]);
  }

  walls
}

let getConnections = (pipes: Pipes, p: Vec2<i32>): Connections -> {
  listGet(listGet(pipes.grid, p.y), p.x)
}

let pointsContain = (points: List<Vec2<i32> >, point: Vec2<i32>): boolean -> {
  let result = false;

  for other in points {
    if vec2Equals(point, other) {
      let result = true;
    }
  }

  result
}

let searchPipes = (pipes: Pipes, visited: List<Vec2<i32> >, current: Vec2<i32>, steps: i32): i32 -> {
  case {
    pointsContain(visited, current) -> steps;
    _ -> {
      let currentConnections = getConnections(pipes, current);

      visited.push(current);

      let size = pipes.size;
      let maxSteps = steps;

      if (current.y > 0) {
        let candidate = Vec2.New({ x: current.x, y: (current.y - 1) });
        let candidateConnections = getConnections(pipes, candidate);

        if (currentConnections.north && candidateConnections.south) {
          let nextSteps = searchPipes(pipes, visited, candidate, (steps + 1));

          maxSteps = max(maxSteps, nextSteps);
        }
      }

      if (current.x < (size.x - 1)) {
        let candidate = Vec2.New({ x: (current.x + 1), y: current.y });
        let candidateConnections = getConnections(pipes, candidate);

        if (currentConnections.east && candidateConnections.west) {
          let nextSteps = searchPipes(pipes, visited, candidate, (steps + 1));

          maxSteps = max(maxSteps, nextSteps);
        }
      }

      if (current.y < (size.y - 1)) {
        let candidate = Vec2.New({ x: current.x, y: (current.y + 1) });
        let candidateConnections = getConnections(pipes, candidate);

        if (currentConnections.south && candidateConnections.north) {
          let nextSteps = searchPipes(pipes, visited, candidate, (steps + 1));

          maxSteps = max(maxSteps, nextSteps);
        }
      }

      if (current.x > 0) {
        let candidate = Vec2.New({ x: (current.x - 1), y: current.y });
        let candidateConnections = getConnections(pipes, candidate);

        if (currentConnections.west && candidateConnections.east) {
          let nextSteps = searchPipes(pipes, visited, candidate, (steps + 1));

          maxSteps = max(maxSteps, nextSteps);
        }
      }

      maxSteps
    };
  }
}

let _solvePart1 = (input: String): String -> {
  let pipes = parseInput(input);
  let steps = searchPipes(pipes, [], pipes.start, 0);
  let result = (steps / 2);

  stringFromNumber(result)
}

data Lake = {
  walls: List<List<i32> >,
  size: Vec2<i32>,
}

let buildLake = (pipes: Pipes, visited: List<Vec2<i32> >): Lake -> {
  let walls = [];
  let pipesSize = pipes.size;
  let lakeSize = Vec2.New({ x: (pipesSize.x * 3), y: (pipesSize.y * 3) });
  let y = 0;

  while (y < lakeSize.y) {
    let row = [];
    let x = 0;

    while (x < lakeSize.x) {
      row.push(0);

      x = (x + 1);
    }

    walls.push(row);

    y = (y + 1);
  }

  for p in visited {
    let connections = getConnections(pipes, p);
    let connectionsWalls = connectionsToWalls(connections);

    for crow, dy in connectionsWalls {
      for wall, dx in crow {
        if (wall == 1) {
          let row = listGet(walls, ((p.y * 3) + dy));

          row.set(((p.x * 3) + dx), 1);
        }
      }
    }
  }

  Lake.New({ walls: walls, size: lakeSize })
}

let _solvePart2 = (input: String): String -> {
  let pipes = parseInput(input);
  let pipesSize = pipes.size;
  let visited = [];
  let steps = searchPipes(pipes, visited, pipes.start, 0);
  let lake = buildLake(pipes, visited);
  let result = 0;
  let y = 0;

  while (y < pipesSize.y) {
    let x = 0;

    while (x < pipesSize.x) {
      let lx = ((x * 3) + 1);
      let ly = ((y * 3) + 1);
      let lv = listGet(listGet(lake.walls, ly), lx);

      if (lv == 0) {
        result = (result + 1);
      }

      x = (x + 1);
    }

    y = (y + 1);
  }

  stringFromNumber(result)
}

let _input = getInput();

# todo
# let part1 = (solvePart1 input);
# (assertEqualString part1 "7107");
# todo
# let _ = (solvePart2 input);
# (assertEqualString part2 "281");
