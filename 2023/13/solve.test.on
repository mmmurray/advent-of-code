data Grid = {
  size: Vec2<i32>,
  rows: List<List<boolean> >,
}

let parseInput = (input: String): List<Grid> -> {
  let grids = [];
  let lines = (stringToLines input);
  let rows = [];
  let size = Vec2 { x: 0, y: 0 };

  for line, lineIndex in lines {
    if (== (stringSize line) 0) {
      let grid = Grid { size: size, rows: rows };

      (listPush grids grid);

      rows = [];
      size = Vec2 { x: 0, y: 0 };
    } else {
      size.x = (stringSize line);
      size.y = (+ size.y 1);

      let row = [];

      for char in (listFromString line) {
        let isWall = (== char '#');

        (listPush row isWall);
      }

      (listPush rows row);
    }
  }

  return grids;
}

let getReflectionScore = (grid: Grid, notScore: i32): i32 -> {
  let result = 0;
  let size = grid.size;
  let colGap = 1;

  while (< colGap size.x) {
    let reflectCount = (min colGap (- size.x colGap));
    let isReflection = true;
    let offset = 0;

    while (< offset reflectCount) {
      let colA = (- colGap (+ offset 1));
      let colB = (+ colGap offset);
      let row = 0;

      while (< row size.y) {
        let valA = (listGet (listGet grid.rows row) colA);
        let valB = (listGet (listGet grid.rows row) colB);

        if (!= (@i32 valA) (@i32 valB)) {
          isReflection = false;

          break;
        }

        row = (+ row 1);
      }

      if (!isReflection) {
        break;
      }

      offset = (+ offset 1);
    }

    if isReflection {
      let score = colGap;

      if (!= score notScore) {
        return score;
      }
    }

    colGap = (+ colGap 1);
  }

  let rowGap = 1;

  while (< rowGap size.y) {
    let reflectCount = (min rowGap (- size.y rowGap));
    let isReflection = true;
    let offset = 0;

    while (< offset reflectCount) {
      let rowA = (- rowGap (+ offset 1));
      let rowB = (+ rowGap offset);
      let col = 0;

      while (< col size.x) {
        let valA = (listGet (listGet grid.rows rowA) col);
        let valB = (listGet (listGet grid.rows rowB) col);

        if (!= (@i32 valA) (@i32 valB)) {
          isReflection = false;

          break;
        }

        col = (+ col 1);
      }

      if (!isReflection) {
        break;
      }

      offset = (+ offset 1);
    }

    if isReflection {
      let score = (* rowGap 100);

      if (!= score notScore) {
        return score;
      }
    }

    rowGap = (+ rowGap 1);
  }

  return result;
}

let solvePart1 = (input: String): String -> {
  let grids = (parseInput input);
  let result = 0;

  for grid in grids {
    result = (+ result (getReflectionScore grid 0));
  }

  return (stringFromNumber result);
}

let removeSmudge = (grid: Grid): i32 -> {
  let originalScore = (getReflectionScore grid 0);
  let size = grid.size;
  let y = 0;

  while (< y size.y) {
    let x = 0;

    while (< x size.x) {
      let row = (listGet grid.rows y);
      let value = (listGet row x);

      (listSet row x (!value));

      let newScore = (getReflectionScore grid originalScore);

      if (> newScore 0) {
        return newScore;
      }

      (listSet row x value);

      x = (+ x 1);
    }

    y = (+ y 1);
  }

  return originalScore;
}

let solvePart2 = (input: String): String -> {
  let grids = (parseInput input);
  let result = 0;

  for grid in grids {
    result = (+ result (removeSmudge grid));
  }

  return (stringFromNumber result);
}

let main = (): unit -> {
  let input = (fileRead "input.txt");
  let part1 = (solvePart1 input);

  (print "Part 1:");
  (print part1);
  (assertEqualString part1 "36015");

  let part2 = (solvePart2 input);

  (print "Part 2:");
  (print part2);
  (assertEqualString part2 "35335");
}
