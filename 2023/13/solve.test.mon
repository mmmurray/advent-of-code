import { assert-equal } from "@assert";
import { list } from "@list";
import { min } from "@math";
import { string, string-from-number } from "@string";
import { vec2 } from "@vec2";
import { get-value: get-input } from "./input.txt";

data grid = { rows: list<list<boolean>>, size: vec2<i32> }

let parse-input = (input: string): list<grid> -> {
  let grids = [];
  let lines = input.to-lines();
  let rows = [];
  let size = vec2.new({ x: 0, y: 0 });

  for line in lines {
    let _ = case {
      line.size() == 0 -> {
        let g = grid.new({ size: size, rows: rows });

        grids.push(g);

        rows = [];
        size = vec2.new({ x: 0, y: 0 });
      };
      _ -> {
        size.x = line.size();
        size.y = size.y + 1;

        let row = [];

        for char in line.to-list() {
          let is-wall = char ==  '#' ;

          row.push(is-wall);
        }

        rows.push(row);
      };
    };
  }

  grids
}

let get-reflection-score = (g: grid, not-score: i32): i32 -> {
  let result = 0;
  let size = g.size;
  let col-gap = 1;
  let loop = true;

  while loop && (col-gap < size.x) {
    let reflect-count = min(col-gap, (size.x - col-gap));
    let is-reflection = true;
    let offset = 0;

    while offset < reflect-count {
      let col-a = col-gap - (offset + 1);
      let col-b = col-gap + offset;
      let row = 0;

      while row < size.y {
        let val-a = (g.rows.get(row)).get(col-a);
        let val-b = (g.rows.get(row)).get(col-b);
        let _ = case {
          $i32(val-a) != $i32(val-b) -> {
            is-reflection = false;
          };
          _ -> {};
        };

        row = row + 1;
      }

      offset = offset + 1;
    }

    let _ = case {
      is-reflection -> {
        let score = col-gap;
        let _ = case {
          score != not-score -> {
            result = score;
            loop = false;
          };
          _ -> {};
        };
      };
      _ -> {};
    };

    col-gap = col-gap + 1;
  }

  case {
    !(loop) -> result;
    _ -> {
      let row-gap = 1;
      let loop1 = true;

      while loop1 && (row-gap < size.y) {
        let reflect-count = min(row-gap, (size.y - row-gap));
        let is-reflection = true;
        let offset = 0;

        while offset < reflect-count {
          let row-a = row-gap - (offset + 1);
          let row-b = row-gap + offset;
          let col = 0;

          while col < size.x {
            let val-a = (g.rows.get(row-a)).get(col);
            let val-b = (g.rows.get(row-b)).get(col);
            let _ = case {
              $i32(val-a) != $i32(val-b) -> {
                is-reflection = false;
              };
              _ -> {};
            };

            col = col + 1;
          }

          offset = offset + 1;
        }

        let _ = case {
          is-reflection -> {
            let score = row-gap * 100;
            let _ = case {
              score != not-score -> {
                result = score;
                loop1 = false;
              };
              _ -> {};
            };
          };
          _ -> {};
        };

        row-gap = row-gap + 1;
      }

      result
    };
  }
}

let solve-part-1 = (input: string): string -> {
  let grids = parse-input(input);
  let result = 0;

  for g in grids {
    result = result + get-reflection-score(g, 0);
  }

  string-from-number(result)
}

let remove-smudge = (g: grid): i32 -> {
  let result = get-reflection-score(g, 0);
  let size = g.size;
  let y = 0;
  let loop = true;

  while loop && (y < size.y) {
    let x = 0;

    while loop && (x < size.x) {
      let row = g.rows.get(y);
      let value = row.get(x);

      row.set(x, !(value));

      let new-score = get-reflection-score(g, result);
      let _ = case {
        new-score > 0 -> {
          result = new-score;
          loop = false;
        };
        _ -> {
          row.set(x, value);

          x = x + 1;
        };
      };
    }

    y = y + 1;
  }

  result
}

let solve-part-2 = (input: string): string -> {
  let grids = parse-input(input);
  let result = 0;

  for g in grids {
    result = result + remove-smudge(g);
  }

  string-from-number(result)
}

let input = get-input();
let part-1 = solve-part-1(input);

assert-equal(part-1, "36015");

let part-2 = solve-part-2(input);

assert-equal(part-2, "35335");
