import { assertEqual } from "@assert";
import { List, listFromArray } from "@list";
import { Vec2, min } from "@math";
import { String, stringFromNumber } from "@string";
import { getValue: getInput } from "./input.txt";

data Grid = {
  size: Vec2<i32>,
  rows: List<List<boolean>>,
}

let parseInput = (input: String): List<Grid> -> {
  let grids = [];
  let lines = input.toLines();
  let rows = [];
  let size = Vec2.New({ x: 0, y: 0 });

  for line in lines {
    let _ = case {
      line.size() == 0 -> {
        let grid = Grid.New({ size: size, rows: rows });

        grids.push(grid);

        rows = [];
        size = Vec2.New({ x: 0, y: 0 });
      };
      _ -> {
        size.x = line.size();
        size.y = size.y + 1;

        let row = [];

        for char in line.toList() {
          let isWall = char == '#';

          row.push(isWall);
        }

        rows.push(row);
      };
    };
  }

  grids
}

let getReflectionScore = (grid: Grid, notScore: i32): i32 -> {
  let result = 0;
  let size = grid.size;
  let colGap = 1;
  let loop = true;

  while loop && (colGap < size.x) {
    let reflectCount = min(colGap, (size.x - colGap));
    let isReflection = true;
    let offset = 0;

    while offset < reflectCount {
      let colA = colGap - (offset + 1);
      let colB = colGap + offset;
      let row = 0;

      while row < size.y {
        let valA = (grid.rows.get(row)).get(colA);
        let valB = (grid.rows.get(row)).get(colB);
        let _ = case {
          (@i32 valA) != (@i32 valB) -> {
            isReflection = false;
          };
          _ -> {};
        };

        row = row + 1;
      }

      offset = offset + 1;
    }

    let _ = case {
      isReflection -> {
        let score = colGap;
        let _ = case {
          score != notScore -> {
            result = score;
            loop = false;
          };
          _ -> {};
        };
      };
      _ -> {};
    };

    colGap = colGap + 1;
  }

  case {
    !(loop) -> result;
    _ -> {
      let rowGap = 1;
      let loop1 = true;

      while loop1 && (rowGap < size.y) {
        let reflectCount = min(rowGap, (size.y - rowGap));
        let isReflection = true;
        let offset = 0;

        while offset < reflectCount {
          let rowA = rowGap - (offset + 1);
          let rowB = rowGap + offset;
          let col = 0;

          while col < size.x {
            let valA = (grid.rows.get(rowA)).get(col);
            let valB = (grid.rows.get(rowB)).get(col);
            let _ = case {
              (@i32 valA) != (@i32 valB) -> {
                isReflection = false;
              };
              _ -> {};
            };

            col = col + 1;
          }

          offset = offset + 1;
        }

        let _ = case {
          isReflection -> {
            let score = rowGap * 100;
            let _ = case {
              score != notScore -> {
                result = score;
                loop1 = false;
              };
              _ -> {};
            };
          };
          _ -> {};
        };

        rowGap = rowGap + 1;
      }

      result
    };
  }
}

let solvePart1 = (input: String): String -> {
  let grids = parseInput(input);
  let result = 0;

  for grid in grids {
    result = result + getReflectionScore(grid, 0);
  }

  stringFromNumber(result)
}

let removeSmudge = (grid: Grid): i32 -> {
  let result = getReflectionScore(grid, 0);
  let size = grid.size;
  let y = 0;
  let loop = true;

  while loop && (y < size.y) {
    let x = 0;

    while loop && (x < size.x) {
      let row = grid.rows.get(y);
      let value = row.get(x);

      row.set(x, !(value));

      let newScore = getReflectionScore(grid, result);
      let _ = case {
        newScore > 0 -> {
          result = newScore;
          loop = false;
        };
        _ -> {
          row.set(x, value);

          x = x + 1;
        };
      };
    }

    y = y + 1;
  }

  result
}

let solvePart2 = (input: String): String -> {
  let grids = parseInput(input);
  let result = 0;

  for grid in grids {
    result = result + removeSmudge(grid);
  }

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqual(part1, "36015");

let part2 = solvePart2(input);

assertEqual(part2, "35335");
