data SchematicSymbol {
  location: Vec2,
  value: i32,
}

data SchematicNumber {
  location: Vec2,
  value: i32,
  length: i32,
}

data Schematic {
  symbols: List<SchematicSymbol>,
  numbers: List<SchematicNumber>,
}

let parseInput = (input: String): Schematic -> {
  let lines = (stringToLines input)
  let schematic = Schematic {
    symbols: (listCreateDefault<SchematicSymbol>),
    numbers: (listCreateDefault<SchematicNumber>),
  }
  
  let lineIndex = 0
  while (< lineIndex (listSize lines)) {
    let line = (listGet lines lineIndex)

    let charIndex = 0
    while (< charIndex (stringSize line)) {
      let char = (stringGet line charIndex)

      if (!= char '.') {
        if (charIsNumeric char) {
          let length = 0
          let value = 0
          let location = Vec2 {
            x: charIndex,
            y: lineIndex,
          }

          while (< charIndex (stringSize line)) {
            char = (stringGet line charIndex)
            if (charIsNumeric char) {
              value = (+ (* value 10) (- char '0'))
              length = (+ 1 length)
            } else {
              break
            }
            charIndex = (+ charIndex 1)
          }

          let number = SchematicNumber {
            location: location,
            value: value,
            length: length,
          }
          (listPush schematic.numbers number)
          charIndex = (- charIndex 1)
        } else {
          let symbol = SchematicSymbol {
            location: Vec2 {
              x: charIndex,
              y: lineIndex,
            },
            value: char,
          }
          (listPush schematic.symbols symbol)
        }
      }

      charIndex = (+ charIndex 1)
    }
    
    lineIndex = (+ lineIndex 1)
  }

  return schematic
}

let solvePart1 = (input: String): String -> {
  let result = 0
  let schematic = (parseInput input)
  let numberIndex = 0
  while (< numberIndex (listSize schematic.numbers)) {
    let number = (listGet schematic.numbers numberIndex)

    let offsetX = 0
    while (< offsetX number.length) {
      let offset = Vec2 { x: offsetX, y: 0 }
      let position = (vec2Add number.location offset)
      let found = false

      let symbolIndex = 0
      while (< symbolIndex (listSize schematic.symbols)) {
        let symbol = (listGet schematic.symbols symbolIndex)

        if (vec2IsAdjacent position symbol.location) {
          found = true
          break
        }

        symbolIndex = (+ symbolIndex 1)
      }

      if found {
        result = (+ result number.value)
        break
      }

      offsetX = (+ offsetX 1)
    }

    numberIndex = (+ numberIndex 1)
  }

  return (stringFromNumber result)
}

let solvePart2 = (input: String): String -> {
  let result = 0
  let schematic = (parseInput input)
  let symbolIndex = 0
  while (< symbolIndex (listSize schematic.symbols)) {
    let symbol = (listGet schematic.symbols symbolIndex)

    if (== symbol.value '*') {
      let adjacentCount = 0
      let adjacentProduct = 1

      let numberIndex = 0
      while (< numberIndex (listSize schematic.numbers)) {
        let number = (listGet schematic.numbers numberIndex)
        let adjacent = false

        let offsetX = 0
        while (< offsetX number.length) {
          let offset = Vec2 { x: offsetX, y: 0 }
          let position = (vec2Add number.location offset)

          if (vec2IsAdjacent position symbol.location) {
            adjacent = true
            break
          }

          offsetX = (+ offsetX 1)
        }

        if adjacent {
          adjacentCount = (+ adjacentCount 1)
          adjacentProduct = (* adjacentProduct number.value)
        }

        numberIndex = (+ numberIndex 1)
      }

      if (== adjacentCount 2) {
        result = (+ result adjacentProduct)
      }
    }

    symbolIndex = (+ symbolIndex 1)
  }
  
  return (stringFromNumber result)
}

let main = (): void -> {
  let input = (stringTrim (fileRead "input.txt"))

  let part1 = (solvePart1 input)
  (print "Part 1:")
  (print part1)
  (assertEqualString part1 "525181")

  let part2 = (solvePart2 input)
  (print "Part 2:")
  (print part2)
  (assertEqualString part2 "84289137")
}
