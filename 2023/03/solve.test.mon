import { assertEqualString } from "@assert";
import { _type_List, listPush } from "@list";
import { Vec2, _type_Vec2, vec2Add, vec2IsAdjacent } from "@math";
import {
  charIsNumeric,
  stringFromNumber,
  stringGet,
  stringSize,
  stringToLines,
  stringTrim,
} from "@string";
import { _type_String } from "@string-base";
import { getValue: getInput } from "./input.txt";

data SchematicSymbol = {
  location: Vec2<i32>,
  value: i32,
}

data SchematicNumber = {
  location: Vec2<i32>,
  value: i32,
  length: i32,
}

data Schematic = {
  symbols: List<SchematicSymbol>,
  numbers: List<SchematicNumber>,
}

let parseInput = (input: String): Schematic -> {
  let lines = stringToLines(input);
  let schematic = Schematic({ symbols: [], numbers: [] });

  for line, lineIndex in lines {
    let charIndex = 0;

    while (charIndex < stringSize(line)) {
      let char = stringGet(line, charIndex);

      if (char != '.') {
        if charIsNumeric(char) {
          let length = 0;
          let value = 0;
          let location = Vec2({ x: charIndex, y: lineIndex });
          let loop = true;

          while (loop && (charIndex < stringSize(line))) {
            char = stringGet(line, charIndex);

            if charIsNumeric(char) {
              value = ((value * 10) + (char - '0'));
              length = (1 + length);
              charIndex = (charIndex + 1);
            } else {
              loop = false;
            }
          }

          let number = SchematicNumber({ location: location, value: value, length: length });

          listPush(schematic.numbers, number);

          charIndex = (charIndex - 1);
        } else {
          let symbol = SchematicSymbol({ location: Vec2({ x: charIndex, y: lineIndex }), value: char });

          listPush(schematic.symbols, symbol);
        }
      }

      charIndex = (charIndex + 1);
    }
  }

  schematic
}

let solvePart1 = (input: String): String -> {
  let result = 0;
  let schematic = parseInput(input);

  for number in schematic.numbers {
    let offsetX = 0;
    let loop = true;

    while (loop && (offsetX < number.length)) {
      let offset = Vec2({ x: offsetX, y: 0 });
      let position = vec2Add(number.location, offset);
      let found = false;

      for symbol in schematic.symbols {
        if vec2IsAdjacent(position, symbol.location) {
          found = true;
        }
      }

      if found {
        result = (result + number.value);
        loop = false;
      } else {
        offsetX = (offsetX + 1);
      }
    }
  }

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let result = 0;
  let schematic = parseInput(input);

  for symbol in schematic.symbols {
    if (symbol.value == '*') {
      let adjacentCount = 0;
      let adjacentProduct = 1;

      for number in schematic.numbers {
        let adjacent = false;
        let offsetX = 0;
        let loop = true;

        while (loop && (offsetX < number.length)) {
          let offset = Vec2({ x: offsetX, y: 0 });
          let position = vec2Add(number.location, offset);

          if vec2IsAdjacent(position, symbol.location) {
            adjacent = true;
            loop = false;
          } else {
            offsetX = (offsetX + 1);
          }
        }

        if adjacent {
          adjacentCount = (adjacentCount + 1);
          adjacentProduct = (adjacentProduct * number.value);
        }
      }

      if (adjacentCount == 2) {
        result = (result + adjacentProduct);
      }
    }
  }

  stringFromNumber(result)
}

let main = (): unit -> {
  let input = stringTrim(getInput());
  let part1 = solvePart1(input);

  assertEqualString(part1, "525181");

  let part2 = solvePart2(input);

  assertEqualString(part2, "84289137");
}
