import { assert-equal } from "@assert";
import { char-is-numeric } from "@char";
import { list } from "@list";
import { string, string-from-number } from "@string";
import { vec2, vec2-new } from "@vec2";
import { get-value: get-input } from "./input.txt";

data schematic-symbol = { location: vec2<i32>, value: i32 }

data schematic-number = { length: i32, location: vec2<i32>, value: i32 }

data schematic = { numbers: list<schematic-number>, symbols: list<schematic-symbol> }

let parse-input = (input: string): schematic -> {
  let lines = input.to-lines();
  let s = schematic.new({ symbols: [], numbers: [] });

  for line, line-index in lines {
    let char-index = 0;

    while char-index < line.size() {
      let char = line.get(char-index);
      let _ = case {
        char !=  '.'  -> {
          let _ = case {
            char-is-numeric(char) -> {
              let length = 0;
              let value = 0;
              let location = vec2-new(char-index, line-index);
              let loop = true;

              while loop && (char-index < line.size()) {
                char = line.get(char-index);

                let _ = case {
                  char-is-numeric(char) -> {
                    value = (value * 10) + (char -  '0' );
                    length = 1 + length;
                    char-index = char-index + 1;
                  };
                  _ -> {
                    loop = false;
                  };
                };
              }

              let number = schematic-number.new({ location: location, value: value, length: length });

              s.numbers.push(number);

              char-index = char-index - 1;
            };
            _ -> {
              let symbol = schematic-symbol.new({ location: vec2-new(char-index, line-index), value: char });

              s.symbols.push(symbol);
            };
          };
        };
        _ -> {};
      };

      char-index = char-index + 1;
    }
  }

  s
}

let solve-part-1 = (input: string): string -> {
  let result = 0;
  let s = parse-input(input);

  for number in s.numbers {
    let offset-x = 0;
    let loop = true;

    while loop && (offset-x < number.length) {
      let offset = vec2-new(offset-x, 0);
      let position = number.location.add(offset);
      let found = false;

      for symbol in s.symbols {
        let _ = case {
          position.is-adjacent(symbol.location) -> {
            found = true;
          };
          _ -> {};
        };
      }

      let _ = case {
        found -> {
          result = result + number.value;
          loop = false;
        };
        _ -> {
          offset-x = offset-x + 1;
        };
      };
    }
  }

  string-from-number(result)
}

let solve-part-2 = (input: string): string -> {
  let result = 0;
  let s = parse-input(input);

  for symbol in s.symbols {
    let _ = case {
      symbol.value ==  '*'  -> {
        let adjacent-count = 0;
        let adjacent-product = 1;

        for number in s.numbers {
          let adjacent = false;
          let offset-x = 0;
          let loop = true;

          while loop && (offset-x < number.length) {
            let offset = vec2-new(offset-x, 0);
            let position = number.location.add(offset);
            let _ = case {
              position.is-adjacent(symbol.location) -> {
                adjacent = true;
                loop = false;
              };
              _ -> {
                offset-x = offset-x + 1;
              };
            };
          }

          let _ = case {
            adjacent -> {
              adjacent-count = adjacent-count + 1;
              adjacent-product = adjacent-product * number.value;
            };
            _ -> {};
          };
        }

        let _ = case {
          adjacent-count == 2 -> {
            result = result + adjacent-product;
          };
          _ -> {};
        };
      };
      _ -> {};
    };
  }

  string-from-number(result)
}

let input = (get-input()).trim();
let part-1 = solve-part-1(input);

assert-equal(part-1, "525181");

let part-2 = solve-part-2(input);

assert-equal(part-2, "84289137");
