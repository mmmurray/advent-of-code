import { assertEqualString } from "@assert";
import { charIsNumeric } from "@char";
import { List } from "@list";
import { Vec2, vec2Add, vec2IsAdjacent } from "@math";
import { String, stringFromNumber } from "@string";
import { getValue: getInput } from "./input.txt";

data SchematicSymbol = {
  location: Vec2<i32>,
  value: i32,
}

data SchematicNumber = {
  location: Vec2<i32>,
  value: i32,
  length: i32,
}

data Schematic = {
  symbols: List<SchematicSymbol>,
  numbers: List<SchematicNumber>,
}

let parseInput = (input: String): Schematic -> {
  let lines = (input).toLines();
  let schematic = Schematic.New({ symbols: [], numbers: [] });

  for line, lineIndex in lines {
    let charIndex = 0;

    while (charIndex < line.size()) {
      let char = line.get(charIndex);
      let _ = case {
        (char != '.') -> {
          let _ = case {
            charIsNumeric(char) -> {
              let length = 0;
              let value = 0;
              let location = Vec2.New({ x: charIndex, y: lineIndex });
              let loop = true;

              while (loop && (charIndex < line.size())) {
                char = line.get(charIndex);

                let _ = case {
                  charIsNumeric(char) -> {
                    value = ((value * 10) + (char - '0'));
                    length = (1 + length);
                    charIndex = (charIndex + 1);
                  };
                  _ -> {
                    loop = false;
                  };
                };
              }

              let number = SchematicNumber.New({ location: location, value: value, length: length });

              (schematic.numbers).push(number);

              charIndex = (charIndex - 1);
            };
            _ -> {
              let symbol = SchematicSymbol.New({
                location: Vec2.New({ x: charIndex, y: lineIndex }),
                value: char,
              });

              (schematic.symbols).push(symbol);
            };
          };
        };
        _ -> {};
      };

      charIndex = (charIndex + 1);
    }
  }

  schematic
}

let solvePart1 = (input: String): String -> {
  let result = 0;
  let schematic = parseInput(input);

  for number in schematic.numbers {
    let offsetX = 0;
    let loop = true;

    while (loop && (offsetX < number.length)) {
      let offset = Vec2.New({ x: offsetX, y: 0 });
      let position = vec2Add(number.location, offset);
      let found = false;

      for symbol in schematic.symbols {
        let _ = case {
          vec2IsAdjacent(position, symbol.location) -> {
            found = true;
          };
          _ -> {};
        };
      }

      let _ = case {
        found -> {
          result = (result + number.value);
          loop = false;
        };
        _ -> {
          offsetX = (offsetX + 1);
        };
      };
    }
  }

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let result = 0;
  let schematic = parseInput(input);

  for symbol in schematic.symbols {
    let _ = case {
      (symbol.value == '*') -> {
        let adjacentCount = 0;
        let adjacentProduct = 1;

        for number in schematic.numbers {
          let adjacent = false;
          let offsetX = 0;
          let loop = true;

          while (loop && (offsetX < number.length)) {
            let offset = Vec2.New({ x: offsetX, y: 0 });
            let position = vec2Add(number.location, offset);
            let _ = case {
              vec2IsAdjacent(position, symbol.location) -> {
                adjacent = true;
                loop = false;
              };
              _ -> {
                offsetX = (offsetX + 1);
              };
            };
          }

          let _ = case {
            adjacent -> {
              adjacentCount = (adjacentCount + 1);
              adjacentProduct = (adjacentProduct * number.value);
            };
            _ -> {};
          };
        }

        let _ = case {
          (adjacentCount == 2) -> {
            result = (result + adjacentProduct);
          };
          _ -> {};
        };
      };
      _ -> {};
    };
  }

  stringFromNumber(result)
}

let input = (getInput()).trim();
let part1 = solvePart1(input);

assertEqualString(part1, "525181");

let part2 = solvePart2(input);

assertEqualString(part2, "84289137");
