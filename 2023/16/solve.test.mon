import { assert-equal } from "@assert";
import { list } from "@list";
import { max, vec2, vec2-add } from "@math";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

data direction =
  | north
  | east
  | south
  | west

let direction-equals = (a: direction, b: direction): boolean -> {
  match a {
    north -> match b {
      north -> true;
      _ -> false;
    };
    east -> match b {
      east -> true;
      _ -> false;
    };
    south -> match b {
      south -> true;
      _ -> false;
    };
    west -> match b {
      west -> true;
      _ -> false;
    };
  }
}

let direction-north = (): direction -> direction.north()

let direction-east = (): direction -> direction.east()

let direction-south = (): direction -> direction.south()

let direction-west = (): direction -> direction.west()

let vec2-north = (): vec2<i32> -> vec2.new({ x: 0, y: --(1) })

let vec2-east = (): vec2<i32> -> vec2.new({ x: 1, y: 0 })

let vec2-south = (): vec2<i32> -> vec2.new({ x: 0, y: 1 })

let vec2-west = (): vec2<i32> -> vec2.new({ x: --(1), y: 0 })

let direction-to-vec2 = (d: direction): vec2<i32> -> {
  match d {
    north -> vec2-north();
    east -> vec2-east();
    south -> vec2-south();
    west -> vec2-west();
  }
}

data tile =
  | empty
  | reflect-forward
  | reflect-backward
  | split-horizontal
  | split-vertical

data grid = {
  energized: list<list<list<direction>>>,
  size: vec2<i32>,
  tiles: list<list<tile>>,
}

let grid-clone = (g: grid): grid -> {
  let new-energized = [];

  for energized-row in g.energized {
    let new-energized-row = [];

    for x in energized-row {
      new-energized-row.push(x.clone());
    }

    new-energized.push(new-energized-row);
  }

  grid.new({ size: g.size, tiles: g.tiles, energized: new-energized })
}

let parse-tile = (char: i32): tile -> {
  case {
    char ==  '/'  -> tile.reflect-forward();
    char ==  '\\'  -> tile.reflect-backward();
    char ==  '-'  -> tile.split-horizontal();
    char ==  '|'  -> tile.split-vertical();
    _ -> tile.empty();
  }
}

let parse-input = (input: string): grid -> {
  let lines = (input.trim()).to-lines();
  let size = vec2.new({ x: (lines.get(0)).size(), y: lines.size() });
  let tiles = [];
  let energized = [];

  for line in lines {
    let tile-row = [];
    let energized-row = [];

    for char, x in line.to-list() {
      tile-row.push(parse-tile(char));
      energized-row.push([]);
    }

    tiles.push(tile-row);
    energized.push(energized-row);
  }

  grid.new({ size: size, tiles: tiles, energized: energized })
}

let propagate = (g: grid, position: vec2<i32>, d: direction): boolean -> {
  let size = g.size;

  case {
    position.x < 0 -> false;
    position.y < 0 -> false;
    position.x >= size.x -> false;
    position.y >= size.y -> false;
    _ -> {
      let energized-row = g.energized.get(position.y);
      let current-energized-directions = energized-row.get(position.x);
      let is-same-direction = false;

      for current-energized-direction in current-energized-directions {
        let _ = case {
          direction-equals(current-energized-direction, d) -> {
            is-same-direction = true;
          };
          _ -> {};
        };
      }

      case {
        is-same-direction -> false;
        _ -> {
          energized-row.set(position.x, [...current-energized-directions, d]);

          let tile = (g.tiles.get(position.y)).get(position.x);
          let direction-vec = direction-to-vec2(d);
          let _ = match tile {
            empty -> {
              propagate(g, vec2-add(position, direction-vec), d);
            };
            reflect-forward -> {
              let _ = match d {
                north -> {
                  propagate(g, vec2-add(position, vec2-east()), direction-east());
                };
                east -> {
                  propagate(g, vec2-add(position, vec2-north()), direction-north());
                };
                south -> {
                  propagate(g, vec2-add(position, vec2-west()), direction-west());
                };
                west -> {
                  propagate(g, vec2-add(position, vec2-south()), direction-south());
                };
              };
            };
            reflect-backward -> {
              let _ = match d {
                north -> {
                  propagate(g, vec2-add(position, vec2-west()), direction-west());
                };
                east -> {
                  propagate(g, vec2-add(position, vec2-south()), direction-south());
                };
                south -> {
                  propagate(g, vec2-add(position, vec2-east()), direction-east());
                };
                west -> {
                  propagate(g, vec2-add(position, vec2-north()), direction-north());
                };
              };
            };
            split-horizontal -> {
              let _ = match d {
                north -> {
                  propagate(g, vec2-add(position, vec2-east()), direction-east());
                  propagate(g, vec2-add(position, vec2-west()), direction-west());
                };
                east -> {
                  propagate(g, vec2-add(position, direction-vec), d);
                };
                south -> {
                  propagate(g, vec2-add(position, vec2-west()), direction-west());
                  propagate(g, vec2-add(position, vec2-east()), direction-east());
                };
                west -> {
                  propagate(g, vec2-add(position, direction-vec), d);
                };
              };
            };
            split-vertical -> {
              let _ = match d {
                north -> {
                  propagate(g, vec2-add(position, direction-vec), d);
                };
                east -> {
                  propagate(g, vec2-add(position, vec2-north()), direction-north());
                  propagate(g, vec2-add(position, vec2-south()), direction-south());
                };
                south -> {
                  propagate(g, vec2-add(position, direction-vec), d);
                };
                west -> {
                  propagate(g, vec2-add(position, vec2-south()), direction-south());
                  propagate(g, vec2-add(position, vec2-north()), direction-north());
                };
              };
            };
          };

          false
        };
      }
    };
  }
}

let count-energized = (g: grid, start-position: vec2<i32>, start-direction: direction): i32 -> {
  let new-grid = grid-clone(g);

  propagate(new-grid, start-position, start-direction);

  let total = 0;

  for row in new-grid.energized {
    for col in row {
      let _ = case {
        col.size() > 0 -> {
          total = total + 1;
        };
        _ -> {};
      };
    }
  }

  total
}

let solve-part-1 = (input: string): string -> {
  let g = parse-input(input);
  let result = count-energized(g, vec2.new({ x: 0, y: 0 }), direction-east());

  string-from-number(result)
}

let solve-part-2 = (input: string): string -> {
  let g = parse-input(input);
  let size = g.size;
  let result = 0;
  let offset = 0;

  while offset < size.x {
    result = max(result, count-energized(g, vec2.new({ x: offset, y: 0 }), direction-south()));
    result = max(result, count-energized(g, vec2.new({ x: offset, y: size.y - 1 }), direction-north()));
    result = max(result, count-energized(g, vec2.new({ x: 0, y: offset }), direction-east()));
    result = max(result, count-energized(g, vec2.new({ x: size.x - 1, y: offset }), direction-west()));
    offset = offset + 1;
  }

  string-from-number(result)
}

let input = get-input();
let part1 = solve-part-1(input);

assert-equal(part1, "8034");

let part2 = solve-part-2(input);

assert-equal(part2, "8225");
