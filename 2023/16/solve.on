data Direction =
  | North {}
  | East {}
  | South {}
  | West {}

let directionNorth: Direction = North {};
let directionEast: Direction = East {};
let directionSouth: Direction = South {};
let directionWest: Direction = West {};
let vec2North: Vec2<i32> = Vec2 { x: 0, y: -1 };
let vec2East: Vec2<i32> = Vec2 { x: 1, y: 0 };
let vec2South: Vec2<i32> = Vec2 { x: 0, y: 1 };
let vec2West: Vec2<i32> = Vec2 { x: -1, y: 0 };

let directionToVec2 = (direction: Direction): Vec2<i32> -> {
  return match direction {
    North -> vec2North;
    East -> vec2East;
    South -> vec2South;
    West -> vec2West;
  };
}

data Tile =
  | Empty {}
  | ReflectForward {}
  | ReflectBackward {}
  | SplitHorizontal {}
  | SplitVertical {}

data Grid = {
  size: Vec2<i32>,
  tiles: List<List<Tile> >,
  energized: List<List<List<Direction> > >,
}

let gridClone = (grid: Grid): Grid -> {
  let newEnergized = [];

  for energizedRow in grid.energized {
    let newEnergizedRow = [];

    for x in energizedRow {
      (listPush newEnergizedRow (listClone x));
    }

    (listPush newEnergized newEnergizedRow);
  }

  return Grid { size: grid.size, tiles: grid.tiles, energized: newEnergized };
}

let parseTile = (char: i32): Tile -> {
  if (== char '/') {
    return ReflectForward {};
  }

  if (== char '\\') {
    return ReflectBackward {};
  }

  if (== char '-') {
    return SplitHorizontal {};
  }

  if (== char '|') {
    return SplitVertical {};
  }

  return Empty {};
}

let parseInput = (input: String): Grid -> {
  let lines = (stringToLines (stringTrim input));
  let size = Vec2 { x: (stringSize (listGet lines 0)), y: (listSize lines) };
  let tiles = [];
  let energized = [];

  for line, y in lines {
    let tileRow = [];
    let energizedRow = [];

    for char, x in (listFromString line) {
      (listPush tileRow (parseTile char));
      (listPush energizedRow []);
    }

    (listPush tiles tileRow);
    (listPush energized energizedRow);
  }

  return Grid { size: size, tiles: tiles, energized: energized };
}

let formatTile = (tile: Tile): String -> {
  return match tile {
    Empty -> ".";
    ReflectForward -> "/";
    ReflectBackward -> "\\";
    SplitHorizontal -> "-";
    SplitVertical -> "|";
  };
}

let printGrid = (grid: Grid): unit -> {
  let size = grid.size;
  let out = (stringBuilderCreate 1024);

  (stringBuilderAppend out "Size: ");
  (stringBuilderAppend out (vec2ToString size));
  (stringBuilderAppend out "\n");

  let y = 0;

  while (< y size.y) {
    let x = 0;

    while (< x size.x) {
      let energized = (listGet (listGet grid.energized y) x);
      let tile = (listGet (listGet grid.tiles y) x);

      if (> (listSize energized) 0) {
        (stringBuilderAppend out "#");
      } else {
        (stringBuilderAppend out (formatTile tile));
      }

      x = (+ x 1);
    }

    (stringBuilderAppend out "\n");

    y = (+ y 1);
  }

  (print (stringBuilderBuild out));
}

let propagate = (grid: Grid, position: Vec2<i32>, direction: Direction): boolean -> {
  let size = grid.size;

  if (< position.x 0) {
    return false;
  }

  if (< position.y 0) {
    return false;
  }

  if (>= position.x size.x) {
    return false;
  }

  if (>= position.y size.y) {
    return false;
  }

  let energizedRow = (listGet grid.energized position.y);
  let currentEnergizedDirections = (listGet energizedRow position.x);

  for currentEnergizedDirection in currentEnergizedDirections {
    if (== (@i32 currentEnergizedDirection) (@i32 direction)) {
      return false;
    }
  }

  (listSet energizedRow position.x [...currentEnergizedDirections, direction]);

  let tile = (listGet (listGet grid.tiles position.y) position.x);
  let directionVec = (directionToVec2 direction);
  let m1 = match tile {
    Empty -> {
      (propagate grid (vec2Add position directionVec) direction);
    };
    ReflectForward -> {
      let m2 = match direction {
        North -> {
          (propagate grid (vec2Add position vec2East) directionEast);
        };
        East -> {
          (propagate grid (vec2Add position vec2North) directionNorth);
        };
        South -> {
          (propagate grid (vec2Add position vec2West) directionWest);
        };
        West -> {
          (propagate grid (vec2Add position vec2South) directionSouth);
        };
      };
    };
    ReflectBackward -> {
      let m2 = match direction {
        North -> {
          (propagate grid (vec2Add position vec2West) directionWest);
        };
        East -> {
          (propagate grid (vec2Add position vec2South) directionSouth);
        };
        South -> {
          (propagate grid (vec2Add position vec2East) directionEast);
        };
        West -> {
          (propagate grid (vec2Add position vec2North) directionNorth);
        };
      };
    };
    SplitHorizontal -> {
      let m2 = match direction {
        North -> {
          (propagate grid (vec2Add position vec2East) directionEast);
          (propagate grid (vec2Add position vec2West) directionWest);
        };
        East -> {
          (propagate grid (vec2Add position directionVec) direction);
        };
        South -> {
          (propagate grid (vec2Add position vec2West) directionWest);
          (propagate grid (vec2Add position vec2East) directionEast);
        };
        West -> {
          (propagate grid (vec2Add position directionVec) direction);
        };
      };
    };
    SplitVertical -> {
      let m2 = match direction {
        North -> {
          (propagate grid (vec2Add position directionVec) direction);
        };
        East -> {
          (propagate grid (vec2Add position vec2North) directionNorth);
          (propagate grid (vec2Add position vec2South) directionSouth);
        };
        South -> {
          (propagate grid (vec2Add position directionVec) direction);
        };
        West -> {
          (propagate grid (vec2Add position vec2South) directionSouth);
          (propagate grid (vec2Add position vec2North) directionNorth);
        };
      };
    };
  };

  return false;
}

let countEnergized = (grid: Grid, startPosition: Vec2<i32>, startDirection: Direction): i32 -> {
  let newGrid = (gridClone grid);

  (propagate newGrid startPosition startDirection);

  let total = 0;

  for row in newGrid.energized {
    for col in row {
      if (> (listSize col) 0) {
        total = (+ total 1);
      }
    }
  }

  return total;
}

let solvePart1 = (input: String): String -> {
  let grid = (parseInput input);
  let result = (countEnergized grid Vec2 { x: 0, y: 0 } directionEast);

  return (stringFromNumber result);
}

let solvePart2 = (input: String): String -> {
  let grid = (parseInput input);
  let size = grid.size;
  let result = 0;
  let offset = 0;

  while (< offset size.x) {
    result = (max result (countEnergized grid Vec2 { x: offset, y: 0 } directionSouth));
    result = (max result (countEnergized grid Vec2 { x: offset, y: (- size.y 1) } directionNorth));
    result = (max result (countEnergized grid Vec2 { x: 0, y: offset } directionEast));
    result = (max result (countEnergized grid Vec2 { x: (- size.x 1), y: offset } directionWest));
    offset = (+ offset 1);
  }

  return (stringFromNumber result);
}

let main = (): unit -> {
  let input = (fileRead "input.txt");
  let part1 = (solvePart1 input);

  (print "Part 1:");
  (print part1);
  (assertEqualString part1 "8034");

  let part2 = (solvePart2 input);

  (print "Part 2:");
  (print part2);
  (assertEqualString part2 "8225");
}
