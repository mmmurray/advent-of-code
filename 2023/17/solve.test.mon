# import { assertEqual } from "@assert";
# import { List, listFromArray } from "@list";
# import { Map, mapCreate } from "@map";
# import { Vec2, vec2Equals } from "@math";
# import { Option } from "@option";
# import { String, stringFromNumber } from "@string";
# import { stringBuilderCreate } from "@string-builder";
# import { getValue: getExample } from "./example.txt";
# let vec2ToString = (v: Vec2<i32>): String -> {
#   let out = stringBuilderCreate();
#   out.append("[");
#   out.append(stringFromNumber(v.x));
#   out.append(", ");
#   out.append(stringFromNumber(v.y));
#   out.append("]");
#   out.build()
# }
# data PriorityQueueHeapEntry<T> = {
#   node: T,
#   priority: i32,
# }
# data PriorityQueue<T> = {
#   heap: List<PriorityQueueHeapEntry<T>>,
# }
# let priorityQueueCreate = <T>(): PriorityQueue<T> -> {
#   PriorityQueue.New({ heap: [] })
# }
# let priorityQueueSize = <T>(queue: PriorityQueue<T>): i32 -> {
#   (queue.heap).size()
# }
# let priorityQueueInsert = <T>(queue: PriorityQueue<T>, node: T, priority: i32): unit -> {
#   let entry = PriorityQueueHeapEntry.New({ node: node, priority: priority });
#   (queue.heap).push(entry);
#   let currentIndex = ((queue.heap).size() - 1);
#   let loop = true;
#   while (loop && (currentIndex > 0)) {
#     let parentIndex = (currentIndex / 2);
#     let parent = (queue.heap).get(parentIndex);
#     let current = (queue.heap).get(currentIndex);
#     let _ = case {
#       (parent.priority > current.priority) -> {
#         loop = false;
#       };
#       _ -> {
#         (queue.heap).set(parentIndex, current);
#         (queue.heap).set(currentIndex, parent);
#         currentIndex = parentIndex;
#       };
#     };
#   }
# }
# let priorityQueueNext = <T>(queue: PriorityQueue<T>): Option<T> -> {
#   case {
#     ((queue.heap).size() == 0) -> Option.None({});
#     ((queue.heap).size() == 1) -> {
#       match (queue.heap).shift() {
#         Some { value } -> Option.Some({ value: value.node });
#         None -> Option.None({});
#       }
#     };
#     _ -> {
#       let highestPriority = (queue.heap).get(0);
#       let _ = match (queue.heap).pop() {
#         Some { value } -> {
#           (queue.heap).set(0, value);
#         };
#         _ -> {};
#       };
#       let currentIndex = 0;
#       let loop = false;
#       while loop {
#         let leftChildIndex = ((currentIndex * 2) + 1);
#         let rightChildIndex = ((currentIndex * 2) + 2);
#         let current = (queue.heap).get(currentIndex);
#         let swapIndex = --(1);
#         let _ = case {
#           (leftChildIndex < (queue.heap).size()) -> {
#             let leftChild = (queue.heap).get(leftChildIndex);
#             let _ = case {
#               (leftChild.priority > current.priority) -> {
#                 swapIndex = leftChildIndex;
#               };
#               _ -> {};
#             };
#           };
#           _ -> {};
#         };
#         let _ = case {
#           (rightChildIndex < (queue.heap).size()) -> {
#             let leftChild = (queue.heap).get(leftChildIndex);
#             let rightChild = (queue.heap).get(rightChildIndex);
#             let _ = case {
#               (((swapIndex < 0) && (rightChild.priority > current.priority)) || ((swapIndex >= 0) && (rightChild.priority > leftChild.priority))) -> {
#                 swapIndex = rightChildIndex;
#               };
#               _ -> {};
#             };
#           };
#           _ -> {};
#         };
#         let _ = case {
#           (swapIndex < 0) -> {
#             loop = false;
#           };
#           _ -> {
#             (queue.heap).set(currentIndex, (queue.heap).get(swapIndex));
#             (queue.heap).set(swapIndex, current);
#             currentIndex = swapIndex;
#           };
#         };
#       }
#       Option.Some({ value: highestPriority.node })
#     };
#   }
# }
# let testPriorityQueue = (): unit -> {
#   let queue = priorityQueueCreate<i32>();
#   assertEqual(priorityQueueSize(queue), 0);
#   priorityQueueInsert(queue, 1, 10);
#   priorityQueueInsert(queue, 2, 30);
#   priorityQueueInsert(queue, 3, 20);
#   priorityQueueInsert(queue, 4, 5);
#   priorityQueueInsert(queue, 5, 50);
#   assertEqual(priorityQueueSize(queue), 5);
#   assertEqual((priorityQueueNext(queue)).or(0), 5);
#   assertEqual(priorityQueueSize(queue), 4);
#   assertEqual((priorityQueueNext(queue)).or(0), 2);
#   assertEqual(priorityQueueSize(queue), 3);
#   assertEqual((priorityQueueNext(queue)).or(0), 3);
#   assertEqual(priorityQueueSize(queue), 2);
#   assertEqual((priorityQueueNext(queue)).or(0), 1);
#   assertEqual(priorityQueueSize(queue), 1);
#   assertEqual((priorityQueueNext(queue)).or(0), 4);
#   assertEqual(priorityQueueSize(queue), 0);
#   assertEqual((priorityQueueNext(queue)).or(0), 0);
#   assertEqual(priorityQueueSize(queue), 0);
# }
# data Grid = {
#   size: Vec2<i32>,
#   tiles: List<List<i32>>,
# }
# let parseInput = (input: String): Grid -> {
#   let lines = (input.trim()).toLines();
#   let size = Vec2.New({ x: (lines.get(0)).size(), y: lines.size() });
#   let tiles = [];
#   for line in lines {
#     let tileRow = [];
#     for char in line.toList() {
#       tileRow.push((char - '0'));
#     }
#     tiles.push(tileRow);
#   }
#   Grid.New({ size: size, tiles: tiles })
# }
# let gridAdjacent = (grid: Grid, position: Vec2<i32>): List<Vec2<i32>> -> {
#   let adjacent = [];
#   let size = grid.size;
#   let _ = case {
#     (position.x < (size.x - 1)) -> {
#       adjacent.push(Vec2.New({ x: (position.x + 1), y: position.y }));
#     };
#     _ -> {};
#   };
#   let _ = case {
#     (position.y < (size.y - 1)) -> {
#       adjacent.push(Vec2.New({ x: position.x, y: (position.y + 1) }));
#     };
#     _ -> {};
#   };
#   let _ = case {
#     (position.x > 0) -> {
#       adjacent.push(Vec2.New({ x: (position.x - 1), y: position.y }));
#     };
#     _ -> {};
#   };
#   let _ = case {
#     (position.y > 0) -> {
#       adjacent.push(Vec2.New({ x: position.x, y: (position.y - 1) }));
#     };
#     _ -> {};
#   };
#   adjacent
# }
# let extractShortestPath = (cameFrom: Map<String, Vec2<i32>>, targetNode: Vec2<i32>): List<Vec2<i32>> -> {
#   # (print "+ extractShortestPath")
#   let path = [];
#   let c = targetNode;
#   # (print (vec2ToString c))
#   path.push(c);
#   let loop = true;
#   while loop {
#     let cameFromOption = cameFrom.get(vec2ToString(c));
#     let done = match cameFromOption {
#       Some -> false;
#       None -> true;
#     };
#     let _ = case {
#       done -> {
#         loop = false;
#       };
#       _ -> match cameFromOption {
#         Some { value } -> {
#           path.push(value);
#         };
#         _ -> {};
#       };
#     };
#   }
#   # (print "- extractShortestPath")
#   path
# }
# let exceedsSingleDirectionLimit = (path: List<Vec2<i32>>): boolean -> {
#   # (print "exceedsSingleDirectionLimit")
#   let limit = 5;
#   let size = path.size();
#   case {
#     (size < limit) -> false;
#     _ -> {
#       let sameX = true;
#       let sameY = true;
#       let i = 0;
#       let current = path.get(i);
#       # (print (stringConcat "Current " (vec2ToString current)))
#       i = (i + 1);
#       while (i < limit) {
#         let next = path.get(i);
#         # (print (stringConcat "Next " (vec2ToString next)))
#         let _ = case {
#           (next.x != current.x) -> {
#             sameX = false;
#           };
#           _ -> {};
#         };
#         let _ = case {
#           (next.y != current.y) -> {
#             sameY = false;
#           };
#           _ -> {};
#         };
#         current = next;
#         i = (i + 1);
#       }
#       let result = (sameX || sameY);
#       # (print (stringConcat "exceedsSingleDirectionLimit result: " (stringFromNumber result)))
#       result
#     };
#   }
# }
# let solvePart1 = (input: String): String -> {
#   let grid = parseInput(input);
#   # (printGrid grid [])
#   let size = grid.size;
#   let startNode = Vec2.New({ x: 0, y: 0 });
#   let targetNode = Vec2.New({ x: (size.x - 1), y: (size.y - 1) });
#   let openSet = priorityQueueCreate();
#   let cameFrom = mapCreate();
#   let gScore = mapCreate();
#   priorityQueueInsert(openSet, startNode, 0);
#   gScore.set(vec2ToString(startNode), 0);
#   let loop = true;
#   while loop {
#     # (print "~~ STEP ~~")
#     let currentOption = priorityQueueNext(openSet);
#     let done = match currentOption {
#       Some -> false;
#       None -> true;
#     };
#     let _ = case {
#       done -> {
#         loop = false;
#       };
#       _ -> match currentOption {
#         Some { value: current } -> {
#           # (print (stringConcat "Current: " (vec2ToString current)))
#           let _ = case {
#             vec2Equals(current, targetNode) -> {
#               # (print "Reached target")
#               loop = false;
#             };
#             _ -> {
#               let currentKey = vec2ToString(current);
#               let currentShortestPath = extractShortestPath(cameFrom, current);
#               # (printGrid grid currentShortestPath)
#               for neighbor in gridAdjacent(grid, current) {
#                 let viable = true;
#                 for visited in currentShortestPath {
#                   let _ = case {
#                     vec2Equals(visited, neighbor) -> {
#                       viable = false;
#                     };
#                     _ -> {};
#                   };
#                 }
#                 let _ = case {
#                   exceedsSingleDirectionLimit([...currentShortestPath, neighbor]) -> {
#                     viable = false;
#                   };
#                   _ -> {};
#                 };
#                 let _ = case {
#                   viable -> {
#                     # let reachedLimit = (exceedsSingleDirectionLimit [...currentShortestPath, neighbor])
#                     # (write (@i32 reachedLimit))
#                     # (print (stringConcat "Neighbor: " (vec2ToString neighbor)))
#                     let neighborKey = vec2ToString(neighbor);
#                     let distance = ((grid.tiles).get(neighbor.y)).get(neighbor.x);
#                     let _ = case {
#                       !(viable) -> {
#                         distance = (distance + 99999);
#                       };
#                       _ -> {};
#                     };
#                     # (print (stringConcat "Distance: " (stringFromNumber distance)))
#                     let currentGScore = (gScore.get(currentKey)).or(10000);
#                     let tentativeGScore = (currentGScore + distance);
#                     let neighborGScore = (gScore.get(neighborKey)).or(10000);
#                     let _ = case {
#                       (tentativeGScore < neighborGScore) -> {
#                         cameFrom.set(neighborKey, current);
#                         gScore.set(neighborKey, tentativeGScore);
#                         priorityQueueInsert(openSet, neighbor, --(tentativeGScore));
#                       };
#                       _ -> {};
#                     };
#                   };
#                   _ -> {};
#                 };
#               }
#             };
#           };
#         };
#         _ -> {};
#       };
#     };
#   }
#   let path = extractShortestPath(cameFrom, targetNode);
#   # (printGrid grid path)
#   let result = 0;
#   for position in path {
#     let _ = case {
#       !(vec2Equals(position, startNode)) -> {
#         let weight = ((grid.tiles).get(position.y)).get(position.x);
#         # (print (stringConcat "Path " (stringConcat (vec2ToString position) (stringFromNumber weight))))
#         result = (result + weight);
#       };
#       _ -> {};
#     };
#   }
#   stringFromNumber(result)
# }
# testPriorityQueue();
# let input = getExample();
# # let _part1 = solvePart1(input);
# # todo
# # (assertEqual part1 "102")
# # todo
# # let part2 = (solvePart2 input)
# # (assertEqual part2 "???")
