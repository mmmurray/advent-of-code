import { List } from "@list";
import { min } from "@math";
import { Range, rangeCreate, rangeEmpty, rangeIntersect, rangeShift } from "@range";
import { String, stringFromNumber } from "@string";
import { getValue: getInput } from "./input.txt";

data AlmanacMapping = {
  destinationStart: u64,
  sourceStart: u64,
  rangeLength: u64,
  sourceRange: Range<u64>,
  offset: u64,
}

data AlmanacCategory = {
  mappings: List<AlmanacMapping>,
}

data Almanac = {
  seeds: List<u64>,
  categories: List<AlmanacCategory>,
}

let parseNumberList = (input: String): List<u64> -> {
  let values = [];
  let parts = input.splitBy(' ');

  for part in parts {
    let num = part.toU64();

    values.push(num);
  }

  values
}

let parseSeeds = (input: String): List<u64> -> {
  let inputParts = input.splitBy(':');
  let values = (inputParts.get(1)).trim();

  parseNumberList(values)
}

let parseInput = (input: String): Almanac -> {
  let lines = (input).toLines();
  let almanac = Almanac.New({ seeds: parseSeeds(lines.get(0)), categories: [] });
  let mappingLines = lines.slice(2, lines.size());
  let category = AlmanacCategory.New({ mappings: [] });

  for mappingLine in mappingLines {
    let _ = case {
      (mappingLine.size() == 0) -> {
        (almanac.categories).push(category);

        category = AlmanacCategory.New({ mappings: [] });
      };
      _ -> {
        let _ = case {
          (mappingLine.get((mappingLine.size() - 1)) != ':') -> {
            let values = parseNumberList(mappingLine);
            let destinationStart = values.get(0);
            let sourceStart = values.get(1);
            let rangeLength = values.get(2);
            let mapping = AlmanacMapping.New({
              destinationStart: destinationStart,
              sourceStart: sourceStart,
              rangeLength: rangeLength,
              sourceRange: rangeCreate(sourceStart, (sourceStart + rangeLength)),
              offset: (destinationStart - sourceStart),
            });

            (category.mappings).push(mapping);
          };
          _ -> {};
        };
      };
    };
  }

  almanac
}

let sortAlmanacMappings = (almanac: Almanac): Almanac -> {
  for category in almanac.categories {
    let endIndex = ((category.mappings).size() - 1);

    while (endIndex > 0) {
      let index = 0;

      while (index < endIndex) {
        let a = (category.mappings).get(index);
        let b = (category.mappings).get((index + 1));
        let _ = case {
          (a.sourceStart > b.sourceStart) -> {
            (category.mappings).set(index, b);
            (category.mappings).set((index + 1), a);
          };
          _ -> {};
        };

        index = (index + 1);
      }

      endIndex = (endIndex - 1);
    }
  }

  almanac
}

let mapPositionToLocation = (almanac: Almanac, position: u64): u64 -> {
  let value = position;
  let loop = true;

  for category in almanac.categories {
    for mapping in category.mappings {
      let _ = case {
        (loop && ((value >= mapping.sourceStart) && (value < (mapping.sourceStart + mapping.rangeLength)))) -> {
          value = (value + mapping.offset);
          loop = false;
        };
        _ -> {};
      };
    }
  }

  value
}

let positionMin: u64 = 0;
let positionMax: u64 = 999999999;

let mapRangeToLocationInCategory = (category: AlmanacCategory, range: Range<u64>): List<Range<u64>> -> {
  let ranges = [];
  let position = positionMin;
  let mappingIndex = 0;

  while (mappingIndex < (category.mappings).size()) {
    let mapping = (category.mappings).get(mappingIndex);
    let mappingRange = mapping.sourceRange;
    let intersectionBefore = rangeIntersect(range, rangeCreate(position, mappingRange.start));
    let _ = case {
      !(rangeEmpty(intersectionBefore)) -> {
        ranges.push(intersectionBefore);
      };
      _ -> {};
    };
    let intersectionMapping = rangeIntersect(range, mappingRange);
    let _ = case {
      !(rangeEmpty(intersectionMapping)) -> {
        ranges.push(rangeShift(mapping.offset, intersectionMapping));
      };
      _ -> {};
    };

    position = mappingRange.end;
    mappingIndex = (mappingIndex + 1);
  }

  let intersectionAfter = rangeIntersect(range, rangeCreate(position, positionMax));
  let _ = case {
    !(rangeEmpty(intersectionAfter)) -> {
      ranges.push(intersectionAfter);
    };
    _ -> {};
  };

  ranges
}

let mapRangeToLocationInAlmanac = (almanac: Almanac, initialRange: Range<u64>): List<Range<u64>> -> {
  let ranges = [];

  ranges.push(initialRange);

  for category in almanac.categories {
    let nextRanges = [];

    for range in ranges {
      nextRanges.pushList(mapRangeToLocationInCategory(category, range));
    }

    ranges = nextRanges;
  }

  ranges
}

let solvePart1 = (input: String): String -> {
  let almanac = sortAlmanacMappings(parseInput(input));
  let result = 999999999;

  for seed in almanac.seeds {
    let location = mapPositionToLocation(almanac, seed);

    result = min(result, location);
  }

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let almanac = sortAlmanacMappings(parseInput(input));
  let ranges = [];

  for seedStart, seedIndex in almanac.seeds {
    let _ = case {
      ((seedIndex % 2) == 0) -> {
        let seedCount = (almanac.seeds).get((seedIndex + 1));
        let seedEnd = (seedStart + seedCount);

        ranges.push(rangeCreate(seedStart, seedEnd));
      };
      _ -> {};
    };
  }

  let result = 999999999;

  for range in ranges {
    let mappedRanges = mapRangeToLocationInAlmanac(almanac, range);

    for mappedRange in mappedRanges {
      result = min(result, mappedRange.start);
    }
  }

  stringFromNumber(result)
}

let input = getInput();
let _ = solvePart1(input);

# todo
# (assertEqual part1 "282277027");

let _ = solvePart2(input);

# todo
# (assertEqual part2 "11554135");
