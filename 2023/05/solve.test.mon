import { list } from "@list";
import { min } from "@math";
import { range, range-create, range-empty, range-intersect, range-shift } from "@range";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

data almanac-mapping = {
  destination-start: u64,
  offset: u64,
  range-length: u64,
  source-range: range<u64>,
  source-start: u64,
}

data almanac-category = { mappings: list<almanac-mapping> }

data almanac = { categories: list<almanac-category>, seeds: list<u64> }

let parse-number-list = (input: string): list<u64> -> {
  let values = [];
  let parts = input.split-by(" ");

  for part in parts {
    let num = part.to-u64();

    values.push(num);
  }

  values
}

let parse-seeds = (input: string): list<u64> -> {
  let input-parts = input.split-by(":");
  let values = (input-parts.get(1)).trim();

  parse-number-list(values)
}

let parse-input = (input: string): almanac -> {
  let lines = input.to-lines();
  let a = almanac.new({ seeds: parse-seeds(lines.get(0)), categories: [] });
  let mapping-lines = lines.slice(2, lines.size());
  let category = almanac-category.new({ mappings: [] });

  for mapping-line in mapping-lines {
    let _ = case {
      mapping-line.size() == 0 -> {
        a.categories.push(category);

        category = almanac-category.new({ mappings: [] });
      };
      _ -> {
        let _ = case {
          mapping-line.get((mapping-line.size() - 1)) !=  ':'  -> {
            let values = parse-number-list(mapping-line);
            let destination-start = values.get(0);
            let source-start = values.get(1);
            let range-length = values.get(2);
            let mapping = almanac-mapping.new({
              destination-start: destination-start,
              source-start: source-start,
              range-length: range-length,
              source-range: range-create(source-start, (source-start + range-length)),
              offset: (destination-start - source-start),
            });

            category.mappings.push(mapping);
          };
          _ -> {};
        };
      };
    };
  }

  a
}

let sort-almanac-mappings = (a: almanac): almanac -> {
  for category in a.categories {
    let end-index = category.mappings.size() - 1;

    while end-index > 0 {
      let index = 0;

      while index < end-index {
        let a = category.mappings.get(index);
        let b = category.mappings.get((index + 1));
        let _ = case {
          a.source-start > b.source-start -> {
            category.mappings.set(index, b);
            category.mappings.set((index + 1), a);
          };
          _ -> {};
        };

        index = index + 1;
      }

      end-index = end-index - 1;
    }
  }

  a
}

let map-position-to-location = (a: almanac, position: u64): u64 -> {
  let value = position;
  let loop = true;

  for category in a.categories {
    for mapping in category.mappings {
      let _ = case {
        loop && ((value >= mapping.source-start) && (value < (mapping.source-start + mapping.range-length))) -> {
          value = value + mapping.offset;
          loop = false;
        };
        _ -> {};
      };
    }
  }

  value
}

let map-range-to-location-in-category = (category: almanac-category, r: range<u64>): list<range<u64>> -> {
  let position-min = 0;
  let position-max = 999999999;
  let ranges = [];
  let position = position-min;
  let mapping-index = 0;

  while mapping-index < category.mappings.size() {
    let mapping = category.mappings.get(mapping-index);
    let mapping-range = mapping.source-range;
    let intersection-before = range-intersect(r, range-create(position, mapping-range.start));
    let _ = case {
      !(range-empty(intersection-before)) -> {
        ranges.push(intersection-before);
      };
      _ -> {};
    };
    let intersection-mapping = range-intersect(r, mapping-range);
    let _ = case {
      !(range-empty(intersection-mapping)) -> {
        ranges.push(range-shift(mapping.offset, intersection-mapping));
      };
      _ -> {};
    };

    position = mapping-range.end;
    mapping-index = mapping-index + 1;
  }

  let intersection-after = range-intersect(r, range-create(position, position-max));
  let _ = case {
    !(range-empty(intersection-after)) -> {
      ranges.push(intersection-after);
    };
    _ -> {};
  };

  ranges
}

let map-range-to-location-in-almanac = (a: almanac, initial-range: range<u64>): list<range<u64>> -> {
  let ranges = [];

  ranges.push(initial-range);

  for category in a.categories {
    let next-ranges = [];

    for r in ranges {
      next-ranges.push-list(map-range-to-location-in-category(category, r));
    }

    ranges = next-ranges;
  }

  ranges
}

let solve-part-1 = (input: string): string -> {
  let a = sort-almanac-mappings(parse-input(input));
  let result = 999999999;

  for seed in a.seeds {
    let location = map-position-to-location(a, seed);

    result = min(result, location);
  }

  string-from-number(result)
}

let solve-part-2 = (input: string): string -> {
  let a = sort-almanac-mappings(parse-input(input));
  let ranges = [];

  for seed-start, seed-index in a.seeds {
    let _ = case {
      (seed-index % 2) == 0 -> {
        let seed-count = a.seeds.get((seed-index + 1));
        let seed-end = seed-start + seed-count;

        ranges.push(range-create(seed-start, seed-end));
      };
      _ -> {};
    };
  }

  let result = 999999999;

  for range in ranges {
    let mapped-ranges = map-range-to-location-in-almanac(a, range);

    for mapped-range in mapped-ranges {
      result = min(result, mapped-range.start);
    }
  }

  string-from-number(result)
}

let input = get-input();
let _ = solve-part-1(input);

# todo
# (assertEqual part-1 "282277027");

let _ = solve-part-2(input);

# todo
# (assertEqual part-2 "11554135");
