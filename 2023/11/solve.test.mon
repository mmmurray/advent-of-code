import { arrayCreate, arrayGet, arraySet } from "@array";
import { assertEqualString } from "@assert";
import { fileRead, print } from "@io";
import {
  _type_List,
  listFromString,
  listGet,
  listPop,
  listPush,
  listPushList,
  listSet,
  listSize,
  listSlice,
} from "@list";
import { _type_Map, mapCreate, mapEntries, mapGet, mapSet, mapSize } from "@map";
import {
  Vec2,
  _type_Vec2,
  lcmMany,
  max,
  min,
  vec2Add,
  vec2Equals,
  vec2IsAdjacent,
  vec2ManhattanDistance,
} from "@math";
import { optionValue } from "@option";
import { _type_Range, rangeCreate, rangeEmpty, rangeIntersect, rangeShift } from "@range";
import {
  charIsNumeric,
  charToString,
  stringBuilderAppend,
  stringBuilderBuild,
  stringBuilderCreate,
  stringConcat,
  stringContainsAt,
  stringEquals,
  stringFromNumber,
  stringGet,
  stringSize,
  stringSlice,
  stringSplitBy,
  stringToLines,
  stringToNumber,
  stringToNumberU64,
  stringTrim,
} from "@string";
import { _type_String } from "@string-base";

data Universe = {
  size: Vec2<i64>,
  galaxies: List<Vec2<i64> >,
}

let parseInput = (input: String): Universe -> {
  let lines = (stringToLines (stringTrim input));
  let galaxies = [];
  let size = (Vec2 { x: (@i64 (stringSize (listGet lines 0))), y: (@i64 (listSize lines)) });

  for line, y in lines {
    for char, x in (listFromString line) {
      if (== char '#') {
        let galaxy = (Vec2 { x: (@i64 x), y: (@i64 y) });

        (listPush galaxies galaxy);
      }
    }
  }

  return (Universe { size: size, galaxies: galaxies });
}

let expandUniverse = (universe: Universe, expansionRate: i64): Universe -> {
  let size = universe.size;
  let emptyRows = [];
  let y = 0;

  while (< y size.y) {
    let empty = true;

    for galaxy in universe.galaxies {
      if (== galaxy.y y) {
        empty = false;
      }
    }

    if empty {
      (listPush emptyRows y);
    }

    y = (+ y 1);
  }

  let emptyCols = [];
  let x = 0;

  while (< x size.x) {
    let empty = true;

    for galaxy in universe.galaxies {
      if (== galaxy.x x) {
        empty = false;
      }
    }

    if empty {
      (listPush emptyCols x);
    }

    x = (+ x 1);
  }

  let newSize = (Vec2 {
    x: (+ size.x (- (* (@i64 (listSize emptyCols)) expansionRate) 1)),
    y: (+ size.y (- (* (@i64 (listSize emptyRows)) expansionRate) 1)),
  });
  let newGalaxies = [];

  for galaxy in universe.galaxies {
    let redShift = (Vec2 { x: 0, y: 0 });

    for emptyCol in emptyCols {
      if (< emptyCol galaxy.x) {
        redShift.x = (+ redShift.x (- expansionRate 1));
      }
    }

    for emptyRow in emptyRows {
      if (< emptyRow galaxy.y) {
        redShift.y = (+ redShift.y (- expansionRate 1));
      }
    }

    let newGalaxy = (vec2Add galaxy redShift);

    (listPush newGalaxies newGalaxy);
  }

  return (Universe { size: newSize, galaxies: newGalaxies });
}

let sumOfDistancesBetweenGalaxies = (universe: Universe): i64 -> {
  let total = 0;
  let count = (listSize universe.galaxies);
  let i = 0;

  while (< i (- count 1)) {
    let j = (+ i 1);

    while (< j count) {
      let galaxy1 = (listGet universe.galaxies i);
      let galaxy2 = (listGet universe.galaxies j);
      let distance = (vec2ManhattanDistance galaxy1 galaxy2);

      total = (+ total distance);
      j = (+ j 1);
    }

    i = (+ i 1);
  }

  return total;
}

let solvePart1 = (input: String): String -> {
  let expansionRate = 2;
  let universe = (expandUniverse (parseInput input) expansionRate);
  let result = (sumOfDistancesBetweenGalaxies universe);

  return (stringFromNumber result);
}

let solvePart2 = (input: String): String -> {
  let expansionRate = 1000000;
  let universe = (expandUniverse (parseInput input) expansionRate);
  let result = (sumOfDistancesBetweenGalaxies universe);

  return (stringFromNumber result);
}

let main = (): unit -> {
  let input = (fileRead "input.txt");
  let part1 = (solvePart1 input);

  (print "Part 1:");
  (print part1);
  (assertEqualString part1 "9565386");

  let part2 = (solvePart2 input);

  (print "Part 2:");
  (print part2);
  (assertEqualString part2 "857986849428");
}
