import { assertEqualString } from "@assert";
import { List, listFromArray } from "@list";
import { Vec2, vec2Add, vec2ManhattanDistance } from "@math";
import { String, stringFromNumber, stringSize, stringToArray, stringToLines } from "@string";
import { getValue: getInput } from "./input.txt";

data Universe = {
  size: Vec2<i64>,
  galaxies: List<Vec2<i64> >,
}

let parseInput = (input: String): Universe -> {
  let lines = stringToLines(input.trim());
  let galaxies = [];
  let size = Vec2.New({ x: (@i64 stringSize(lines.get(0))), y: (@i64 lines.size()) });

  for line, y in lines {
    for char, x in listFromArray(stringToArray(line)) {
      if (char == '#') {
        let galaxy = Vec2.New({ x: (@i64 x), y: (@i64 y) });

        galaxies.push(galaxy);
      }
    }
  }

  Universe.New({ size: size, galaxies: galaxies })
}

let expandUniverse = (universe: Universe, expansionRate: i64): Universe -> {
  let size = universe.size;
  let emptyRows = [];
  let y = 0;

  while (y < size.y) {
    let empty = true;

    for galaxy in universe.galaxies {
      if (galaxy.y == y) {
        empty = false;
      }
    }

    if empty {
      emptyRows.push(y);
    }

    y = (y + 1);
  }

  let emptyCols = [];
  let x = 0;

  while (x < size.x) {
    let empty = true;

    for galaxy in universe.galaxies {
      if (galaxy.x == x) {
        empty = false;
      }
    }

    if empty {
      emptyCols.push(x);
    }

    x = (x + 1);
  }

  let newSize = Vec2.New({
    x: (size.x + (((@i64 emptyCols.size()) * expansionRate) - 1)),
    y: (size.y + (((@i64 emptyRows.size()) * expansionRate) - 1)),
  });
  let newGalaxies = [];

  for galaxy in universe.galaxies {
    let redShift = Vec2.New({ x: 0, y: 0 });

    for emptyCol in emptyCols {
      if (emptyCol < galaxy.x) {
        redShift.x = (redShift.x + (expansionRate - 1));
      }
    }

    for emptyRow in emptyRows {
      if (emptyRow < galaxy.y) {
        redShift.y = (redShift.y + (expansionRate - 1));
      }
    }

    let newGalaxy = vec2Add(galaxy, redShift);

    newGalaxies.push(newGalaxy);
  }

  Universe.New({ size: newSize, galaxies: newGalaxies })
}

let sumOfDistancesBetweenGalaxies = (universe: Universe): i64 -> {
  let total = 0;
  let count = (universe.galaxies).size();
  let i = 0;

  while (i < (count - 1)) {
    let j = (i + 1);

    while (j < count) {
      let galaxy1 = (universe.galaxies).get(i);
      let galaxy2 = (universe.galaxies).get(j);
      let distance = vec2ManhattanDistance(galaxy1, galaxy2);

      total = (total + distance);
      j = (j + 1);
    }

    i = (i + 1);
  }

  total
}

let solvePart1 = (input: String): String -> {
  let expansionRate = 2;
  let universe = expandUniverse(parseInput(input), expansionRate);
  let result = sumOfDistancesBetweenGalaxies(universe);

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let expansionRate = 1000000;
  let universe = expandUniverse(parseInput(input), expansionRate);
  let result = sumOfDistancesBetweenGalaxies(universe);

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqualString(part1, "9565386");

let part2 = solvePart2(input);

assertEqualString(part2, "857986849428");
