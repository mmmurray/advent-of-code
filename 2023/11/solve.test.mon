import { assert-equal } from "@assert";
import { list, list-from-array } from "@list";
import { vec2, vec2-add, vec2-manhattan-distance } from "@math";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

data universe = { galaxies: list<vec2<i64>>, size: vec2<i64> }

let parse-input = (input: string): universe -> {
  let lines = (input.trim()).to-lines();
  let galaxies = [];
  let size = vec2.new({ x: $i64((lines.get(0)).size()), y: $i64(lines.size()) });

  for line, y in lines {
    for char, x in line.to-list() {
      let _ = case {
        char == '#' -> {
          let galaxy = vec2.new({ x: $i64(x), y: $i64(y) });

          galaxies.push(galaxy);
        };
        _ -> {};
      };
    }
  }

  universe.new({ size: size, galaxies: galaxies })
}

let expand-universe = (u: universe, expansion-rate: i64): universe -> {
  let size = u.size;
  let empty-rows = [];
  let y = 0;

  while y < size.y {
    let empty = true;

    for galaxy in u.galaxies {
      let _ = case {
        galaxy.y == y -> {
          empty = false;
        };
        _ -> {};
      };
    }

    let _ = case {
      empty -> {
        empty-rows.push(y);
      };
      _ -> {};
    };

    y = y + 1;
  }

  let empty-cols = [];
  let x = 0;

  while x < size.x {
    let empty = true;

    for galaxy in u.galaxies {
      let _ = case {
        galaxy.x == x -> {
          empty = false;
        };
        _ -> {};
      };
    }

    let _ = case {
      empty -> {
        empty-cols.push(x);
      };
      _ -> {};
    };

    x = x + 1;
  }

  let new-size = vec2.new({
    x: (size.x + (($i64(empty-cols.size()) * expansion-rate) - 1)),
    y: (size.y + (($i64(empty-rows.size()) * expansion-rate) - 1)),
  });
  let new-galaxies = [];

  for galaxy in u.galaxies {
    let red-shift = vec2.new({ x: 0, y: 0 });

    for empty-col in empty-cols {
      let _ = case {
        empty-col < galaxy.x -> {
          red-shift.x = red-shift.x + (expansion-rate - 1);
        };
        _ -> {};
      };
    }

    for empty-row in empty-rows {
      let _ = case {
        empty-row < galaxy.y -> {
          red-shift.y = red-shift.y + (expansion-rate - 1);
        };
        _ -> {};
      };
    }

    let new-galaxy = vec2-add(galaxy, red-shift);

    new-galaxies.push(new-galaxy);
  }

  universe.new({ size: new-size, galaxies: new-galaxies })
}

let sum-of-distances-between-galaxies = (u: universe): i64 -> {
  let total = 0;
  let count = u.galaxies.size();
  let i = 0;

  while i < (count - 1) {
    let j = i + 1;

    while j < count {
      let galaxy1 = u.galaxies.get(i);
      let galaxy2 = u.galaxies.get(j);
      let distance = vec2-manhattan-distance(galaxy1, galaxy2);

      total = total + distance;
      j = j + 1;
    }

    i = i + 1;
  }

  total
}

let solve-part1 = (input: string): string -> {
  let expansion-rate = 2;
  let u = expand-universe(parse-input(input), expansion-rate);
  let result = sum-of-distances-between-galaxies(u);

  string-from-number(result)
}

let solve-part2 = (input: string): string -> {
  let expansion-rate = 1000000;
  let u = expand-universe(parse-input(input), expansion-rate);
  let result = sum-of-distances-between-galaxies(u);

  string-from-number(result)
}

let input = get-input();
let part1 = solve-part1(input);

assert-equal(part1, "9565386");

let part2 = solve-part2(input);

assert-equal(part2, "857986849428");
