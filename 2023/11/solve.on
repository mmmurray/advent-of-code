let vec2ManhattanDistance = (a: Vec2, b: Vec2): i32 -> {
  let dx = (abs (- a.x b.x))
  let dy = (abs (- a.y b.y))
  return (+ dx dy)
}

data Universe {
  size: Vec2,
  galaxies: List<Vec2>,
}

let parseInput = (input: String): Universe -> {
  let lines = (stringToLines (stringTrim input))
  let galaxies = (listCreateDefault<Vec2>)
  let size = Vec2 { x: (stringSize (listGet lines 0)), y: (listSize lines) }

  for line, y in lines {
    for char, x in line {
      if (== char '#') {
        let galaxy = Vec2 { x: x, y: y }
        (listPush galaxies galaxy)
      }
    }
  }

  return Universe {
    size: size,
    galaxies: galaxies,
  }
}

let expandUniverse = (universe: Universe, expansionRate: i32): Universe -> {
  let size = universe.size
  let emptyRows = (listCreateDefault<i32>)
  let y = 0
  while (< y size.y) {
    let empty = true
    for galaxy in universe.galaxies {
      if (== galaxy.y y) {
        empty = false
      }
    }
    if empty {
      (listPush emptyRows y)
    }
    y = (+ y 1)
  }
  let emptyCols = (listCreateDefault<i32>)
  let x = 0
  while (< x size.x) {
    let empty = true
    for galaxy in universe.galaxies {
      if (== galaxy.x x) {
        empty = false
      }
    }
    if empty {
      (listPush emptyCols x)
    }
    x = (+ x 1)
  }

  let newSize = Vec2 {
    x: (+ size.x (- (* (listSize emptyCols) expansionRate) 1)),
    y: (+ size.y (- (* (listSize emptyRows) expansionRate) 1)),
  }

  let newGalaxies = (listCreateDefault<Vec2>)

  for galaxy in universe.galaxies {
    let redShift = Vec2 { x: 0, y: 0 }
    
    for emptyCol in emptyCols {
      if (< emptyCol galaxy.x) {
        redShift.x = (+ redShift.x (- expansionRate 1))
      }
    }

    for emptyRow in emptyRows {
      if (< emptyRow galaxy.y) {
        redShift.y = (+ redShift.y (- expansionRate 1))
      }
    }

    let newGalaxy = (vec2Add galaxy redShift)
    (listPush newGalaxies newGalaxy)
  }

  return Universe {
    size: newSize,
    galaxies: newGalaxies,
  }
}

let sumOfDistancesBetweenGalaxies = (universe: Universe): i32 -> {
  let total = 0
  let count = (listSize universe.galaxies)
  let i = 0
  while (< i (- count 1)) {
    let j = (+ i 1)
    while (< j count) {
      let galaxy1 = (listGet universe.galaxies i)
      let galaxy2 = (listGet universe.galaxies j)
      let distance = (vec2ManhattanDistance galaxy1 galaxy2)
      total = (+ total distance)
      j = (+ j 1)
    }
    i = (+ i 1)
  }
  return total
}

let solvePart1 = (input: String): String -> {
  let expansionRate = 2
  let universe = (expandUniverse (parseInput input) expansionRate)
  let result = (sumOfDistancesBetweenGalaxies universe)

  return (stringFromNumber result)
}

let solvePart2 = (input: String): String -> {
  let expansionRate = 1000000
  let universe = (expandUniverse (parseInput input) expansionRate)
  let result = (sumOfDistancesBetweenGalaxies universe)

  return (stringFromNumber result)
}

let main = (): void -> {
  let input = (fileRead "input.txt")

  let part1 = (solvePart1 input)
  (print "Part 1:")
  (print part1)
  (assertEqualString part1 "9565386")

  let part2 = (solvePart2 input)
  (print "Part 2:")
  (print part2)
  (assertEqualString part2 "857986849428")
}
