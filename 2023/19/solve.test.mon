import { assert-equal } from "@assert";
import { print } from "@io";
import { list } from "@list";
import { map, map-create } from "@map";
import { option } from "@option";
import { string, string-from-char, string-from-number } from "@string";
import { string-builder-create } from "@string-builder";
import { get-value: get-input } from "./input.txt";

data rating = { a: i32, m: i32, s: i32, x: i32 }

data condition = { operator: i32, property: i32, value: i32 }

data workflow-step =
  | workflow-step({ target: string })
  | workflow-step-conditional({ condition: condition, target: string })

data workflow = { name: string, steps: list<workflow-step> }

data system = { ratings: list<rating>, workflows: map<string, workflow> }

let workflow-default = (): workflow -> workflow.new({ name: "", steps: [] })

let parse-workflow = (input: string): workflow -> {
  let workflow-parts = input.split-by( '{' );
  let name = workflow-parts.get(0);
  let inner-part = workflow-parts.get(1);
  let inner = inner-part.slice(0, (inner-part.size() - 1));
  let steps = [];
  let step-parts = inner.split-by( ',' );

  for step-part in step-parts {
    let _ = case {
      step-part.contains(":") -> {
        let condition-parts = step-part.split-by( ':' );
        let condition-part = condition-parts.get(0);
        let target = condition-parts.get(1);
        let step = workflow-step.workflow-step-conditional({
          target: target,
          condition: condition.new({
            property: condition-part.get(0),
            operator: condition-part.get(1),
            value: (condition-part.slice(2, condition-part.size())).to-i32(),
          }),
        });

        steps.push(step);
      };
      _ -> {
        let step2 = workflow-step.workflow-step({ target: step-part });

        steps.push(step2);
      };
    };
  }

  workflow.new({ name: name, steps: steps })
}

let parse-rating = (input: string): rating -> {
  let r = rating.new({ x: 0, m: 0, a: 0, s: 0 });
  let inner = input.slice(1, (input.size() - 1));
  let rating-parts = inner.split-by( ',' );

  for rating-part in rating-parts {
    let property-parts = rating-part.split-by( '=' );
    let property-name = property-parts.get(0);
    let property-value = (property-parts.get(1)).to-i32();
    let _ = case {
      property-name.equals("x") -> {
        r.x = property-value;
      };
      _ -> {};
    };
    let _ = case {
      property-name.equals("m") -> {
        r.m = property-value;
      };
      _ -> {};
    };
    let _ = case {
      property-name.equals("a") -> {
        r.a = property-value;
      };
      _ -> {};
    };
    let _ = case {
      property-name.equals("s") -> {
        r.s = property-value;
      };
      _ -> {};
    };
  }

  r
}

let parse-input = (input: string): system -> {
  let lines = (input.trim()).to-lines();
  let in-workflows-section = true;
  let workflows = map-create();
  let ratings = [];

  for line in lines {
    let _ = case {
      line.size() == 0 -> {
        in-workflows-section = false;
      };
      _ -> {
        let _ = case {
          in-workflows-section -> {
            let workflow = parse-workflow(line);

            workflows.set(workflow.name, workflow);
          };
          _ -> {
            ratings.push(parse-rating(line));
          };
        };
      };
    };
  }

  system.new({ workflows: workflows, ratings: ratings })
}

let _print-system = (s: system): unit -> {
  let out = string-builder-create();
  let workflows = s.workflows;

  for workflow-item in workflows.entries() {
    let workflow = workflow-item.value;

    out.append(workflow.name);
    out.append("{");

    for step, step-index in workflow.steps {
      let _ = case {
        step-index > 0 -> {
          out.append(",");
        };
        _ -> {};
      };
      let _ = match step {
        workflow-step({ target }) -> {
          out.append(target);
        };
        workflow-step-conditional({ target, condition }) -> {
          out.append(string-from-char(condition.property));
          out.append(string-from-char(condition.operator));
          out.append(string-from-number(condition.value));
          out.append(":");
          out.append(target);
        };
      };
    }

    out.append("}\n");
  }

  out.append("\n");

  for r in s.ratings {
    out.append("{x=");
    out.append(string-from-number(r.x));
    out.append(",m=");
    out.append(string-from-number(r.m));
    out.append(",a=");
    out.append(string-from-number(r.a));
    out.append(",s=");
    out.append(string-from-number(r.s));
    out.append("}\n");
  }

  print(out.build());
}

let does-condition-apply = (c: condition, r: rating): boolean -> {
  let property-value = case {
    c.property ==  'x'  -> r.x;
    c.property ==  'm'  -> r.m;
    c.property ==  'a'  -> r.a;
    _ -> r.s;
  };

  case {
    c.operator ==  '>'  -> property-value > c.value;
    _ -> property-value < c.value;
  }
}

let is-part-accepted = (workflows: map<string, workflow>, r: rating): boolean -> {
  let current-workflow = "in";
  let result = false;
  let loop = true;

  while loop {
    loop = case {
      current-workflow.equals("A") -> {
        result = true;

        false
      };
      current-workflow.equals("R") -> {
        result = false;

        false
      };
      _ -> {
        let workflow = (workflows.get(current-workflow)).or(workflow-default());
        let loop = true;

        for step in workflow.steps {
          let _ = case {
            loop -> {
              let continue = match step {
                workflow-step({ target }) -> {
                  current-workflow = target;

                  false
                };
                workflow-step-conditional({ target, condition }) -> {
                  let inner = true;
                  let _ = case {
                    does-condition-apply(condition, r) -> {
                      current-workflow = target;
                      inner = false;
                    };
                    _ -> {};
                  };

                  inner
                };
              };
              let _ = case {
                !(continue) -> {
                  loop = false;
                };
                _ -> {};
              };
            };
            _ -> {};
          };
        }

        true
      };
    };
  }

  result
}

let solve-part1 = (input: string): string -> {
  let s = parse-input(input);
  let result = 0;

  for r in s.ratings {
    let _ = case {
      is-part-accepted(s.workflows, r) -> {
        let sum = r.x + (r.m + (r.a + r.s));

        result = result + sum;
      };
      _ -> {};
    };
  }

  string-from-number(result)
}

let input = get-input();
let part1 = solve-part1(input);

assert-equal(part1, "287054");

# todo
# let part2 = (solvePart2 input)
# (assertEqual part2 "???")
