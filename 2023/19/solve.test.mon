import { assertEqualString } from "@assert";
import { print } from "@io";
import { List, listGet } from "@list";
import { Map, mapCreate } from "@map";
import { Option } from "@option";
import {
  String,
  charToString,
  stringContains,
  stringEquals,
  stringFromNumber,
  stringGet,
  stringSize,
  stringSlice,
  stringSplitBy,
  stringToLines,
  stringToNumber,
  stringTrim,
} from "@string";
import { stringBuilderCreate } from "@string-builder";
import { getValue: getInput } from "./input.txt";

let optionExpect = <T>(option: Option<T>): T -> {
  match option {
    Some { value } -> value;
    None -> (@T 0);
  }
}

data Rating = {
  x: i32,
  m: i32,
  a: i32,
  s: i32,
}

data Condition = {
  property: i32,
  operator: i32,
  value: i32,
}

data WorkflowStep =
  | WorkflowStep {
      target: String,
    }
  | WorkflowStepConditional {
      target: String,
      condition: Condition,
    }

data Workflow = {
  name: String,
  steps: List<WorkflowStep>,
}

data System = {
  ratings: List<Rating>,
  workflows: Map<String, Workflow>,
}

let parseWorkflow = (input: String): Workflow -> {
  let workflowParts = stringSplitBy(input, '{');
  let name = listGet(workflowParts, 0);
  let innerPart = listGet(workflowParts, 1);
  let inner = stringSlice(innerPart, 0, (stringSize(innerPart) - 1));
  let steps = [];
  let stepParts = stringSplitBy(inner, ',');

  for stepPart in stepParts {
    if stringContains(stepPart, ":") {
      let conditionParts = stringSplitBy(stepPart, ':');
      let conditionPart = listGet(conditionParts, 0);
      let target = listGet(conditionParts, 1);
      let step = WorkflowStep.WorkflowStepConditional({
        target: target,
        condition: Condition.New({
          property: stringGet(conditionPart, 0),
          operator: stringGet(conditionPart, 1),
          value: stringToNumber(stringSlice(conditionPart, 2, stringSize(conditionPart))),
        }),
      });

      steps.push(step);
    } else {
      let step2 = WorkflowStep.WorkflowStep({ target: stepPart });

      steps.push(step2);
    }
  }

  Workflow.New({ name: name, steps: steps })
}

let parseRating = (input: String): Rating -> {
  let rating = Rating.New({ x: 0, m: 0, a: 0, s: 0 });
  let inner = stringSlice(input, 1, (stringSize(input) - 1));
  let ratingParts = stringSplitBy(inner, ',');

  for ratingPart in ratingParts {
    let propertyParts = stringSplitBy(ratingPart, '=');
    let propertyName = listGet(propertyParts, 0);
    let propertyValue = stringToNumber(listGet(propertyParts, 1));

    if stringEquals(propertyName, "x") {
      rating.x = propertyValue;
    }

    if stringEquals(propertyName, "m") {
      rating.m = propertyValue;
    }

    if stringEquals(propertyName, "a") {
      rating.a = propertyValue;
    }

    if stringEquals(propertyName, "s") {
      rating.s = propertyValue;
    }
  }

  rating
}

let parseInput = (input: String): System -> {
  let lines = stringToLines(stringTrim(input));
  let inWorkflowsSection = true;
  let workflows = mapCreate();
  let ratings = [];

  for line in lines {
    if (stringSize(line) == 0) {
      inWorkflowsSection = false;
    } else {
      if inWorkflowsSection {
        let workflow = parseWorkflow(line);

        workflows.set(workflow.name, workflow);
      } else {
        ratings.push(parseRating(line));
      }
    }
  }

  System.New({ workflows: workflows, ratings: ratings })
}

let _printSystem = (system: System): unit -> {
  let out = stringBuilderCreate();
  let workflows = system.workflows;

  for workflowItem in workflows.entries() {
    let workflow = workflowItem.value;

    out.append(workflow.name);
    out.append("{");

    for step, stepIndex in workflow.steps {
      if (stepIndex > 0) {
        out.append(",");
      }

      let _ = match step {
        WorkflowStep { target } -> {
          out.append(target);
        };
        WorkflowStepConditional { target, condition } -> {
          out.append(charToString(condition.property));
          out.append(charToString(condition.operator));
          out.append(stringFromNumber(condition.value));
          out.append(":");
          out.append(target);
        };
      };
    }

    out.append("}\n");
  }

  out.append("\n");

  for rating in system.ratings {
    out.append("{x=");
    out.append(stringFromNumber(rating.x));
    out.append(",m=");
    out.append(stringFromNumber(rating.m));
    out.append(",a=");
    out.append(stringFromNumber(rating.a));
    out.append(",s=");
    out.append(stringFromNumber(rating.s));
    out.append("}\n");
  }

  print(out.build());
}

let doesConditionApply = (condition: Condition, rating: Rating): boolean -> {
  let propertyValue = case {
    (condition.property == 'x') -> rating.x;
    (condition.property == 'm') -> rating.m;
    (condition.property == 'a') -> rating.a;
    _ -> rating.s;
  };

  case {
    (condition.operator == '>') -> (propertyValue > condition.value);
    _ -> (propertyValue < condition.value);
  }
}

let isPartAccepted = (workflows: Map<String, Workflow>, rating: Rating): boolean -> {
  let currentWorkflow = "in";
  let result = false;
  let loop = true;

  while loop {
    # (print (stringConcat "currentWorkflow: " currentWorkflow))

    loop = case {
      stringEquals(currentWorkflow, "A") -> {
        result = true;

        false
      };
      stringEquals(currentWorkflow, "R") -> {
        result = false;

        false
      };
      _ -> {
        let workflow = optionExpect(workflows.get(currentWorkflow));
        let loop = true;

        for step in workflow.steps {
          if loop {
            let continue = match step {
              WorkflowStep { target } -> {
                currentWorkflow = target;

                false
              };
              WorkflowStepConditional { target, condition } -> {
                let inner = true;

                if doesConditionApply(condition, rating) {
                  currentWorkflow = target;
                  inner = false;
                }

                inner
              };
            };

            if !(continue) {
              loop = false;
            }
          }
        }

        true
      };
    };
  }

  result
}

let solvePart1 = (input: String): String -> {
  let system = parseInput(input);
  let result = 0;

  for rating in system.ratings {
    if isPartAccepted(system.workflows, rating) {
      let sum = (rating.x + (rating.m + (rating.a + rating.s)));

      result = (result + sum);
    }
  }

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqualString(part1, "287054");

# todo
# let part2 = (solvePart2 input)
# (assertEqualString part2 "???")
