import { assertEqual } from "@assert";
import { print } from "@io";
import { List } from "@list";
import { Map, mapCreate } from "@map";
import { Option } from "@option";
import { String, stringFromChar, stringFromNumber } from "@string";
import { stringBuilderCreate } from "@string-builder";
import { getValue: getInput } from "./input.txt";

data Rating = {
  x: i32,
  m: i32,
  a: i32,
  s: i32,
}

data Condition = {
  property: i32,
  operator: i32,
  value: i32,
}

data WorkflowStep =
  | WorkflowStep {
      target: String,
    }
  | WorkflowStepConditional {
      target: String,
      condition: Condition,
    }

data Workflow = {
  name: String,
  steps: List<WorkflowStep>,
}

data System = {
  ratings: List<Rating>,
  workflows: Map<String, Workflow>,
}

let workflowDefault = (): Workflow -> Workflow.New({ name: "", steps: [] })

let parseWorkflow = (input: String): Workflow -> {
  let workflowParts = input.splitBy('{');
  let name = workflowParts.get(0);
  let innerPart = workflowParts.get(1);
  let inner = innerPart.slice(0, (innerPart.size() - 1));
  let steps = [];
  let stepParts = inner.splitBy(',');

  for stepPart in stepParts {
    let _ = case {
      stepPart.contains(":") -> {
        let conditionParts = stepPart.splitBy(':');
        let conditionPart = conditionParts.get(0);
        let target = conditionParts.get(1);
        let step = WorkflowStep.WorkflowStepConditional({
          target: target,
          condition: Condition.New({
            property: conditionPart.get(0),
            operator: conditionPart.get(1),
            value: (conditionPart.slice(2, conditionPart.size())).toI32(),
          }),
        });

        steps.push(step);
      };
      _ -> {
        let step2 = WorkflowStep.WorkflowStep({ target: stepPart });

        steps.push(step2);
      };
    };
  }

  Workflow.New({ name: name, steps: steps })
}

let parseRating = (input: String): Rating -> {
  let rating = Rating.New({ x: 0, m: 0, a: 0, s: 0 });
  let inner = input.slice(1, (input.size() - 1));
  let ratingParts = inner.splitBy(',');

  for ratingPart in ratingParts {
    let propertyParts = ratingPart.splitBy('=');
    let propertyName = propertyParts.get(0);
    let propertyValue = (propertyParts.get(1)).toI32();
    let _ = case {
      propertyName.equals("x") -> {
        rating.x = propertyValue;
      };
      _ -> {};
    };
    let _ = case {
      propertyName.equals("m") -> {
        rating.m = propertyValue;
      };
      _ -> {};
    };
    let _ = case {
      propertyName.equals("a") -> {
        rating.a = propertyValue;
      };
      _ -> {};
    };
    let _ = case {
      propertyName.equals("s") -> {
        rating.s = propertyValue;
      };
      _ -> {};
    };
  }

  rating
}

let parseInput = (input: String): System -> {
  let lines = (input.trim()).toLines();
  let inWorkflowsSection = true;
  let workflows = mapCreate();
  let ratings = [];

  for line in lines {
    let _ = case {
      line.size() == 0 -> {
        inWorkflowsSection = false;
      };
      _ -> {
        let _ = case {
          inWorkflowsSection -> {
            let workflow = parseWorkflow(line);

            workflows.set(workflow.name, workflow);
          };
          _ -> {
            ratings.push(parseRating(line));
          };
        };
      };
    };
  }

  System.New({ workflows: workflows, ratings: ratings })
}

let _printSystem = (system: System): unit -> {
  let out = stringBuilderCreate();
  let workflows = system.workflows;

  for workflowItem in workflows.entries() {
    let workflow = workflowItem.value;

    out.append(workflow.name);
    out.append("{");

    for step, stepIndex in workflow.steps {
      let _ = case {
        stepIndex > 0 -> {
          out.append(",");
        };
        _ -> {};
      };
      let _ = match step {
        WorkflowStep { target } -> {
          out.append(target);
        };
        WorkflowStepConditional { target, condition } -> {
          out.append(stringFromChar(condition.property));
          out.append(stringFromChar(condition.operator));
          out.append(stringFromNumber(condition.value));
          out.append(":");
          out.append(target);
        };
      };
    }

    out.append("}\n");
  }

  out.append("\n");

  for rating in system.ratings {
    out.append("{x=");
    out.append(stringFromNumber(rating.x));
    out.append(",m=");
    out.append(stringFromNumber(rating.m));
    out.append(",a=");
    out.append(stringFromNumber(rating.a));
    out.append(",s=");
    out.append(stringFromNumber(rating.s));
    out.append("}\n");
  }

  print(out.build());
}

let doesConditionApply = (condition: Condition, rating: Rating): boolean -> {
  let propertyValue = case {
    condition.property == 'x' -> rating.x;
    condition.property == 'm' -> rating.m;
    condition.property == 'a' -> rating.a;
    _ -> rating.s;
  };

  case {
    condition.operator == '>' -> propertyValue > condition.value;
    _ -> propertyValue < condition.value;
  }
}

let isPartAccepted = (workflows: Map<String, Workflow>, rating: Rating): boolean -> {
  let currentWorkflow = "in";
  let result = false;
  let loop = true;

  while loop {
    loop = case {
      currentWorkflow.equals("A") -> {
        result = true;

        false
      };
      currentWorkflow.equals("R") -> {
        result = false;

        false
      };
      _ -> {
        let workflow = (workflows.get(currentWorkflow)).or(workflowDefault());
        let loop = true;

        for step in workflow.steps {
          let _ = case {
            loop -> {
              let continue = match step {
                WorkflowStep { target } -> {
                  currentWorkflow = target;

                  false
                };
                WorkflowStepConditional { target, condition } -> {
                  let inner = true;
                  let _ = case {
                    doesConditionApply(condition, rating) -> {
                      currentWorkflow = target;
                      inner = false;
                    };
                    _ -> {};
                  };

                  inner
                };
              };
              let _ = case {
                !(continue) -> {
                  loop = false;
                };
                _ -> {};
              };
            };
            _ -> {};
          };
        }

        true
      };
    };
  }

  result
}

let solvePart1 = (input: String): String -> {
  let system = parseInput(input);
  let result = 0;

  for rating in system.ratings {
    let _ = case {
      isPartAccepted(system.workflows, rating) -> {
        let sum = rating.x + (rating.m + (rating.a + rating.s));

        result = result + sum;
      };
      _ -> {};
    };
  }

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqual(part1, "287054");

# todo
# let part2 = (solvePart2 input)
# (assertEqual part2 "???")
