data Game {
  winning: List<i32>,
  numbers: List<i32>,
}

let parseNumberList = (input: String): List<i32> -> {
  let parts = (stringSplitBy (stringTrim input) ' ')
  let numbers = (listCreateDefault<i32>)

  for part in parts {
    let trimmed = (stringTrim part)
    if (> (stringSize trimmed) 0) {
      let number = (stringToNumber trimmed)
      (listPush numbers number)
    }
  }

  return numbers
}

let parseInput = (input: String): List<Game> -> {
  let lines = (stringToLines input)
  let games = (listCreateDefault<Game>)
  
  for line in lines {
    let lineParts = (stringSplitBy line ':')
    let sectionParts = (stringSplitBy (listGet lineParts 1) '|')
    let game = Game {
      winning: (parseNumberList (listGet sectionParts 0)),
      numbers: (parseNumberList (listGet sectionParts 1)),
    }
    (listPush games game)
  }

  return games
}

let solvePart1 = (input: String): String -> {
  let result = 0
  let games = (parseInput input)

  for game, gameIndex in games {
    let score = 0

    for number in game.numbers {
      for needed in game.winning {
        if (== number needed) {
          score = (max 1 (* score 2))
        }
      }
    }

    result = (+ result score)
  }

  return (stringFromNumber result)
}

let solvePart2 = (input: String): String -> {
  let result = 0
  let games = (parseInput input)

  let resultByGame = (arrayCreate<i32> (listSize games))
  let countByGame = (arrayCreate<i32> (listSize games))

  for game, gameIndex in games {
    let gameResult = 0

    for number in game.numbers {
      for needed in game.winning {
        if (== number needed) {
          gameResult = (+ gameResult 1)
        }
      }
    }

    (arraySet resultByGame gameIndex gameResult)
    (arraySet countByGame gameIndex 1)
  }

  for count, gameIndex in countByGame {
    result = (+ result count)

    let gameStart = (+ gameIndex 1)
    let gameEnd = (+ gameStart (arrayGet resultByGame gameIndex))
    while (< gameStart gameEnd) {
      let currentCount = (arrayGet countByGame gameStart)
      let newCount = (+ currentCount count)
      (arraySet countByGame gameStart newCount)
      gameStart = (+ gameStart 1)
    }
  }

  return (stringFromNumber result)
}

let main = (): void -> {
  let input = (stringTrim (fileRead "input.txt"))

  let part1 = (solvePart1 input)
  (print "Part 1:")
  (print part1)
  (assertEqualString part1 "21959")

  let part2 = (solvePart2 input)
  (print "Part 2:")
  (print part2)
  (assertEqualString part2 "5132675")
}
