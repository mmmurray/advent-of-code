import { arrayCreate, arrayGet, arraySet } from "@array";
import { assertEqual } from "@assert";
import { List } from "@list";
import { max } from "@math";
import { String, stringFromNumber } from "@string";
import { getValue: getInput } from "./input.txt";

data Game = {
  winning: List<i32>,
  numbers: List<i32>,
}

let parseNumberList = (input: String): List<i32> -> {
  let parts = (input.trim()).splitBy(' ');
  let numbers = [];

  for part in parts {
    let trimmed = part.trim();
    let _ = case {
      trimmed.size() > 0 -> {
        numbers.push(trimmed.toI32());
      };
      _ -> {};
    };
  }

  numbers
}

let parseInput = (input: String): List<Game> -> {
  let lines = (input.trim()).toLines();
  let games = [];

  for line in lines {
    let lineParts = line.splitBy(':');
    let sectionParts = (lineParts.get(1)).splitBy('|');

    games.push(Game.New({
      winning: parseNumberList(sectionParts.get(0)),
      numbers: parseNumberList(sectionParts.get(1)),
    }));
  }

  games
}

let solvePart1 = (input: String): String -> {
  let result = 0;
  let games = parseInput(input);

  for game, gameIndex in games {
    let score = 0;

    for number in game.numbers {
      for needed in game.winning {
        let _ = case {
          number == needed -> {
            score = max(1, (score * 2));
          };
          _ -> {};
        };
      }
    }

    result = result + score;
  }

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let result = 0;
  let games = parseInput(input);
  let resultByGame = arrayCreate(games.size());
  let countByGame = [];

  for game, gameIndex in games {
    let gameResult = 0;

    for number in game.numbers {
      for needed in game.winning {
        let _ = case {
          number == needed -> {
            gameResult = gameResult + 1;
          };
          _ -> {};
        };
      }
    }

    arraySet(resultByGame, gameIndex, gameResult);
    countByGame.push(1);
  }

  for count, gameIndex in countByGame {
    result = result + count;

    let gameStart = gameIndex + 1;
    let gameEnd = gameStart + arrayGet(resultByGame, gameIndex);

    while gameStart < gameEnd {
      let currentCount = countByGame.get(gameStart);
      let newCount = currentCount + count;

      countByGame.set(gameStart, newCount);

      gameStart = gameStart + 1;
    }
  }

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqual(part1, "21959");

let part2 = solvePart2(input);

assertEqual(part2, "5132675");
