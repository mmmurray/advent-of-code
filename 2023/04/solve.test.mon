import { arrayCreate, arrayGet, arraySet } from "@array";
import { assertEqualString } from "@assert";
import { List, listGet, listSet } from "@list";
import { max } from "@math";
import {
  String,
  stringFromNumber,
  stringSize,
  stringSplitBy,
  stringToLines,
  stringToNumber,
  stringTrim,
} from "@string";
import { getValue: getInput } from "./input.txt";

data Game = {
  winning: List<i32>,
  numbers: List<i32>,
}

let parseNumberList = (input: String): List<i32> -> {
  let parts = stringSplitBy(stringTrim(input), ' ');
  let numbers = [];

  for part in parts {
    let trimmed = stringTrim(part);

    if (stringSize(trimmed) > 0) {
      numbers.push(stringToNumber(trimmed));
    }
  }

  numbers
}

let parseInput = (input: String): List<Game> -> {
  let lines = stringToLines(stringTrim(input));
  let games = [];

  for line in lines {
    let lineParts = stringSplitBy(line, ':');
    let sectionParts = stringSplitBy(listGet(lineParts, 1), '|');

    games.push(Game.New({
      winning: parseNumberList(listGet(sectionParts, 0)),
      numbers: parseNumberList(listGet(sectionParts, 1)),
    }));
  }

  games
}

let solvePart1 = (input: String): String -> {
  let result = 0;
  let games = parseInput(input);

  for game, gameIndex in games {
    let score = 0;

    for number in game.numbers {
      for needed in game.winning {
        if (number == needed) {
          score = max(1, (score * 2));
        }
      }
    }

    result = (result + score);
  }

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let result = 0;
  let games = parseInput(input);
  let resultByGame = arrayCreate(games.size());
  let countByGame = [];

  for game, gameIndex in games {
    let gameResult = 0;

    for number in game.numbers {
      for needed in game.winning {
        if (number == needed) {
          gameResult = (gameResult + 1);
        }
      }
    }

    arraySet(resultByGame, gameIndex, gameResult);
    countByGame.push(1);
  }

  for count, gameIndex in countByGame {
    result = (result + count);

    let gameStart = (gameIndex + 1);
    let gameEnd = (gameStart + arrayGet(resultByGame, gameIndex));

    while (gameStart < gameEnd) {
      let currentCount = listGet(countByGame, gameStart);
      let newCount = (currentCount + count);

      listSet(countByGame, gameStart, newCount);

      gameStart = (gameStart + 1);
    }
  }

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqualString(part1, "21959");

let part2 = solvePart2(input);

assertEqualString(part2, "5132675");
