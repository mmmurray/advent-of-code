import { array-create, array-get, array-set } from "@array";
import { assert-equal } from "@assert";
import { list } from "@list";
import { max } from "@math";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

data game = { numbers: list<i32>, winning: list<i32> }

let parse-number-list = (input: string): list<i32> -> {
  let parts = (input.trim()).split-by(" ");
  let numbers = [];

  for part in parts {
    let trimmed = part.trim();
    let _ = case {
      trimmed.size() > 0 -> {
        numbers.push(trimmed.to-i32());
      };
      _ -> {};
    };
  }

  numbers
}

let parse-input = (input: string): list<game> -> {
  let lines = (input.trim()).to-lines();
  let games = [];

  for line in lines {
    let line-parts = line.split-by(":");
    let section-parts = (line-parts.get(1)).split-by("|");

    games.push(game.new({
      winning: parse-number-list(section-parts.get(0)),
      numbers: parse-number-list(section-parts.get(1)),
    }));
  }

  games
}

let solve-part-1 = (input: string): string -> {
  let result = 0;
  let games = parse-input(input);

  for game, game-index in games {
    let score = 0;

    for number in game.numbers {
      for needed in game.winning {
        let _ = case {
          number == needed -> {
            score = max(1, (score * 2));
          };
          _ -> {};
        };
      }
    }

    result = result + score;
  }

  string-from-number(result)
}

let solve-part-2 = (input: string): string -> {
  let result = 0;
  let games = parse-input(input);
  let result-by-game = array-create(games.size());
  let count-by-game = [];

  for game, game-index in games {
    let game-result = 0;

    for number in game.numbers {
      for needed in game.winning {
        let _ = case {
          number == needed -> {
            game-result = game-result + 1;
          };
          _ -> {};
        };
      }
    }

    array-set(result-by-game, game-index, game-result);
    count-by-game.push(1);
  }

  for count, game-index in count-by-game {
    result = result + count;

    let game-start = game-index + 1;
    let game-end = game-start + array-get(result-by-game, game-index);

    while game-start < game-end {
      let current-count = count-by-game.get(game-start);
      let new-count = current-count + count;

      count-by-game.set(game-start, new-count);

      game-start = game-start + 1;
    }
  }

  string-from-number(result)
}

let input = get-input();
let part-1 = solve-part-1(input);

assert-equal(part-1, "21959");

let part-2 = solve-part-2(input);

assert-equal(part-2, "5132675");
