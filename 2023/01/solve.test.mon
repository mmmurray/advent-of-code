import { assertEqualString } from "@assert";
import { charIsNumeric } from "@char";
import { listFromArray } from "@list";
import {
  String,
  stringConcat,
  stringContainsAt,
  stringFromNumber,
  stringToArray,
  stringToLines,
  stringToNumber,
} from "@string";
import { getValue: getInput } from "./input.txt";

let getCalibrationValue1 = (line: String): i32 -> {
  let setFirstDigit = false;
  let firstDigit = 0;
  let lastDigit = 0;

  for char in listFromArray(stringToArray(line)) {
    if charIsNumeric(char) {
      let digit = (char - '0');

      lastDigit = digit;

      if !(setFirstDigit) {
        firstDigit = digit;
        setFirstDigit = true;
      }
    }
  }

  stringToNumber(stringConcat(stringFromNumber(firstDigit), stringFromNumber(lastDigit)))
}

let solvePart1 = (input: String): String -> {
  let lines = stringToLines(input);
  let result = 0;

  for line in lines {
    let calibrationValue = getCalibrationValue1(line);

    result = (result + calibrationValue);
  }

  stringFromNumber(result)
}

let digitStrings: List<String> = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine"];

let getCalibrationValue2 = (line: String): i32 -> {
  let setFirstDigit = false;
  let firstDigit = 0;
  let lastDigit = 0;

  for char, charIndex in listFromArray(stringToArray(line)) {
    if charIsNumeric(char) {
      let digit = (char - '0');

      lastDigit = digit;

      if !(setFirstDigit) {
        firstDigit = digit;
        setFirstDigit = true;
      }
    } else {
      for digitString, digitStringIndex in digitStrings {
        if stringContainsAt(line, digitString, charIndex) {
          let digit2 = (digitStringIndex + 1);

          lastDigit = digit2;

          if !(setFirstDigit) {
            firstDigit = digit2;
            setFirstDigit = true;
          }
        }
      }
    }
  }

  stringToNumber(stringConcat(stringFromNumber(firstDigit), stringFromNumber(lastDigit)))
}

let solvePart2 = (input: String): String -> {
  let lines = stringToLines(input);
  let result = 0;

  for line in lines {
    let calibrationValue = getCalibrationValue2(line);

    result = (result + calibrationValue);
  }

  stringFromNumber(result)
}

let input = (getInput()).trim();
let part1 = solvePart1(input);

assertEqualString(part1, "54605");

let part2 = solvePart2(input);

assertEqualString(part2, "55429");
