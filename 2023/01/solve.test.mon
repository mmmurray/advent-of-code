import { assert-equal } from "@assert";
import { char-is-numeric } from "@char";
import { list-from-array } from "@list";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

let get-calibration-value1 = (line: string): i32 -> {
  let set-first-digit = false;
  let first-digit = 0;
  let last-digit = 0;

  for char in line.to-list() {
    let _ = case {
      char-is-numeric(char) -> {
        let digit = char - '0';

        last-digit = digit;

        let _ = case {
          !(set-first-digit) -> {
            first-digit = digit;
            set-first-digit = true;
          };
          _ -> {};
        };
      };
      _ -> {};
    };
  }

  ((string-from-number(first-digit)).concat(string-from-number(last-digit))).to-i32()
}

let solve-part1 = (input: string): string -> {
  let lines = input.to-lines();
  let result = 0;

  for line in lines {
    let calibration-value = get-calibration-value1(line);

    result = result + calibration-value;
  }

  string-from-number(result)
}

let get-calibration-value2 = (line: string): i32 -> {
  let digit-strings = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine"];
  let set-first-digit = false;
  let first-digit = 0;
  let last-digit = 0;

  for char, char-index in line.to-list() {
    let _ = case {
      char-is-numeric(char) -> {
        let digit = char - '0';

        last-digit = digit;

        let _ = case {
          !(set-first-digit) -> {
            first-digit = digit;
            set-first-digit = true;
          };
          _ -> {};
        };
      };
      _ -> {
        for digit-string, digit-string-index in digit-strings {
          let _ = case {
            line.contains-at(digit-string, char-index) -> {
              let digit2 = digit-string-index + 1;

              last-digit = digit2;

              let _ = case {
                !(set-first-digit) -> {
                  first-digit = digit2;
                  set-first-digit = true;
                };
                _ -> {};
              };
            };
            _ -> {};
          };
        }
      };
    };
  }

  ((string-from-number(first-digit)).concat(string-from-number(last-digit))).to-i32()
}

let solve-part2 = (input: string): string -> {
  let lines = input.to-lines();
  let result = 0;

  for line in lines {
    let calibration-value = get-calibration-value2(line);

    result = result + calibration-value;
  }

  string-from-number(result)
}

let input = (get-input()).trim();
let part1 = solve-part1(input);

assert-equal(part1, "54605");

let part2 = solve-part2(input);

assert-equal(part2, "55429");
