import { assertEqual } from "@assert";
import { charIsNumeric } from "@char";
import { listFromArray } from "@list";
import { String, stringFromNumber } from "@string";
import { getValue: getInput } from "./input.txt";

let getCalibrationValue1 = (line: String): i32 -> {
  let setFirstDigit = false;
  let firstDigit = 0;
  let lastDigit = 0;

  for char in line.toList() {
    let _ = case {
      charIsNumeric(char) -> {
        let digit = (char - '0');

        lastDigit = digit;

        let _ = case {
          !(setFirstDigit) -> {
            firstDigit = digit;
            setFirstDigit = true;
          };
          _ -> {};
        };
      };
      _ -> {};
    };
  }

  ((stringFromNumber(firstDigit)).concat(stringFromNumber(lastDigit))).toI32()
}

let solvePart1 = (input: String): String -> {
  let lines = (input).toLines();
  let result = 0;

  for line in lines {
    let calibrationValue = getCalibrationValue1(line);

    result = (result + calibrationValue);
  }

  stringFromNumber(result)
}

let getCalibrationValue2 = (line: String): i32 -> {
  let digitStrings = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine"];
  let setFirstDigit = false;
  let firstDigit = 0;
  let lastDigit = 0;

  for char, charIndex in line.toList() {
    let _ = case {
      charIsNumeric(char) -> {
        let digit = (char - '0');

        lastDigit = digit;

        let _ = case {
          !(setFirstDigit) -> {
            firstDigit = digit;
            setFirstDigit = true;
          };
          _ -> {};
        };
      };
      _ -> {
        for digitString, digitStringIndex in digitStrings {
          let _ = case {
            line.containsAt(digitString, charIndex) -> {
              let digit2 = (digitStringIndex + 1);

              lastDigit = digit2;

              let _ = case {
                !(setFirstDigit) -> {
                  firstDigit = digit2;
                  setFirstDigit = true;
                };
                _ -> {};
              };
            };
            _ -> {};
          };
        }
      };
    };
  }

  ((stringFromNumber(firstDigit)).concat(stringFromNumber(lastDigit))).toI32()
}

let solvePart2 = (input: String): String -> {
  let lines = (input).toLines();
  let result = 0;

  for line in lines {
    let calibrationValue = getCalibrationValue2(line);

    result = (result + calibrationValue);
  }

  stringFromNumber(result)
}

let input = (getInput()).trim();
let part1 = solvePart1(input);

assertEqual(part1, "54605");

let part2 = solvePart2(input);

assertEqual(part2, "55429");
