import { assertEqualString } from "@assert";
import { _type_List, listGet, listPush } from "@list";
import { Mat2, Vec2, _type_Mat2, _type_Vec2, mat2Determinant, vec2Add, vec2Scale } from "@math";
import {
  stringConcat,
  stringFromNumber,
  stringGet,
  stringSlice,
  stringSplitBy,
  stringToLines,
  stringToNumberI64,
  stringToUpper,
  stringTrim,
} from "@string";
import { _type_String } from "@string-base";
import { getValue: getInput } from "./input.txt";

data Direction =
  | North {}
  | East {}
  | South {}
  | West {}

let directionNorth = (): Direction -> North({})

let directionEast = (): Direction -> East({})

let directionSouth = (): Direction -> South({})

let directionWest = (): Direction -> West({})

let vec2North = (): Vec2<i64> -> Vec2({ x: 0, y: --(1) })

let vec2East = (): Vec2<i64> -> Vec2({ x: 1, y: 0 })

let vec2South = (): Vec2<i64> -> Vec2({ x: 0, y: 1 })

let vec2West = (): Vec2<i64> -> Vec2({ x: --(1), y: 0 })

let directionToVec2 = (direction: Direction): Vec2<i64> -> {
  match direction {
    North -> vec2North();
    East -> vec2East();
    South -> vec2South();
    West -> vec2West();
  }
}

data DigPlanStep = {
  direction: Direction,
  distance: i64,
  color: String,
}

let parseDirection = (input: String): Direction -> {
  let char = stringGet(input, 0);

  case {
    (char == 'U') -> directionNorth();
    (char == 'R') -> directionEast();
    (char == 'D') -> directionSouth();
    (char == 'L') -> directionWest();
    _ -> directionNorth();
  }
}

let parseInput = (input: String): List<DigPlanStep> -> {
  let lines = stringToLines(stringTrim(input));
  let steps = [];

  for line in lines {
    let parts = stringSplitBy(line, ' ');
    let direction = parseDirection(listGet(parts, 0));
    let distance = stringToNumberI64(listGet(parts, 1));
    let color = listGet(parts, 2);
    let step = DigPlanStep({ direction: direction, distance: distance, color: color });

    listPush(steps, step);
  }

  steps
}

data Step = {
  direction: Direction,
  distance: i64,
}

let calculateAreaFromSteps = (steps: List<Step>): i64 -> {
  # Shoelace formula (https://en.wikipedia.org/wiki/Shoelace_formula#Example)
  # Determines the area of a simple polygon whose vertices are described by
  # their Cartesian coordinates in the plane
  # Since the Shoelace formula considers the area of the polygon made up from the _center_
  # of each grid cell, we need to account for the missing area from the perimeter.
  # Intuitively: if the shape was a square we would count half the area of each
  # side tile and a quarter of the area of each of the 4 corner tiles.
  # Therefore the missing area that we need to add is perimeter / 2 + 1.
  # This is generalized as:
  # Pick's theorem (https://en.wikipedia.org/wiki/Pick%27s_theorem) which provides
  # a formula for the area of a simple polygon with integer vertex coordinates,
  # in terms of the number of integer points within it and on its boundary:
  #
  # area = interiorPoints + borderPoints / 2 - 1
  # 
  # Rearranging gives:
  # 
  # interiorPoints = area - borderPoints / 2 + 1
  # interiorPoints + borderPoints = area + borderPoints / 2 + 1

  let shoelaceArea = 0;
  let borderPoints = 0;
  let initialPosition = Vec2({ x: 0, y: 0 });
  let position = initialPosition;

  for step in steps {
    borderPoints = (borderPoints + step.distance);

    let delta = vec2Scale(step.distance, directionToVec2(step.direction));
    let nextPosition = vec2Add(position, delta);

    shoelaceArea = (shoelaceArea + mat2Determinant(Mat2({ a: position.x, b: nextPosition.x, c: position.y, d: nextPosition.y })));
    position = nextPosition;
  }

  shoelaceArea = (shoelaceArea + mat2Determinant(Mat2({ a: position.x, b: initialPosition.x, c: position.y, d: initialPosition.y })));

  let area = (shoelaceArea / 2);

  ((area + (borderPoints / 2)) + 1)
}

let solvePart1 = (input: String): String -> {
  let planSteps = parseInput(input);
  let steps = [];

  for planStep in planSteps {
    listPush(steps, Step({ direction: planStep.direction, distance: planStep.distance }));
  }

  let result = calculateAreaFromSteps(steps);

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let planSteps = parseInput(input);
  let steps = [];
  let orderedDirections = [directionEast(), directionSouth(), directionWest(), directionNorth()];

  for planStep in planSteps {
    let distanceHex = stringSlice(planStep.color, 2, 7);
    let distance = stringToNumberI64(stringConcat("0x", stringToUpper(distanceHex)));
    let directionNum = (stringGet(planStep.color, 7) - '0');

    listPush(steps, Step({ direction: listGet(orderedDirections, directionNum), distance: distance }));
  }

  let result = calculateAreaFromSteps(steps);

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqualString(part1, "44436");

let part2 = solvePart2(input);

assertEqualString(part2, "106941819907437");
