import { assert-equal } from "@assert";
import { list } from "@list";
import { mat2, mat2-determinant, vec2, vec2-add, vec2-scale } from "@math";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

data direction =
  | north
  | east
  | south
  | west

let direction-north = (): direction -> direction.north()

let direction-east = (): direction -> direction.east()

let direction-south = (): direction -> direction.south()

let direction-west = (): direction -> direction.west()

let vec2-north = (): vec2<i64> -> vec2.new({ x: 0, y: --(1) })

let vec2-east = (): vec2<i64> -> vec2.new({ x: 1, y: 0 })

let vec2-south = (): vec2<i64> -> vec2.new({ x: 0, y: 1 })

let vec2-west = (): vec2<i64> -> vec2.new({ x: --(1), y: 0 })

let direction-to-vec2 = (d: direction): vec2<i64> -> {
  match d {
    north -> vec2-north();
    east -> vec2-east();
    south -> vec2-south();
    west -> vec2-west();
  }
}

data dig-plan-step = { color: string, direction: direction, distance: i64 }

let parse-direction = (input: string): direction -> {
  let char = input.get(0);

  case {
    char ==  'U'  -> direction-north();
    char ==  'R'  -> direction-east();
    char ==  'D'  -> direction-south();
    char ==  'L'  -> direction-west();
    _ -> direction-north();
  }
}

let parse-input = (input: string): list<dig-plan-step> -> {
  let lines = (input.trim()).to-lines();
  let steps = [];

  for line in lines {
    let parts = line.split-by(" ");
    let d = parse-direction(parts.get(0));
    let distance = (parts.get(1)).to-i64();
    let color = parts.get(2);
    let step = dig-plan-step.new({ direction: d, distance: distance, color: color });

    steps.push(step);
  }

  steps
}

data step = { direction: direction, distance: i64 }

let calculate-area-from-steps = (steps: list<step>): i64 -> {
  # Shoelace formula (https://en.wikipedia.org/wiki/Shoelace_formula#Example)
  # Determines the area of a simple polygon whose vertices are described by
  # their Cartesian coordinates in the plane
  # Since the Shoelace formula considers the area of the polygon made up from the _center_
  # of each grid cell, we need to account for the missing area from the perimeter.
  # Intuitively: if the shape was a square we would count half the area of each
  # side tile and a quarter of the area of each of the 4 corner tiles.
  # Therefore the missing area that we need to add is perimeter / 2 + 1.
  # This is generalized as:
  # Pick's theorem (https://en.wikipedia.org/wiki/Pick%27s_theorem) which provides
  # a formula for the area of a simple polygon with integer vertex coordinates,
  # in terms of the number of integer points within it and on its boundary:
  #
  # area = interiorPoints + borderPoints / 2 - 1
  # 
  # Rearranging gives:
  # 
  # interiorPoints = area - borderPoints / 2 + 1
  # interiorPoints + borderPoints = area + borderPoints / 2 + 1

  let shoelace-area = 0;
  let border-points = 0;
  let initial-position = vec2.new({ x: 0, y: 0 });
  let position = initial-position;

  for step in steps {
    border-points = border-points + step.distance;

    let delta = vec2-scale(step.distance, direction-to-vec2(step.direction));
    let next-position = vec2-add(position, delta);

    shoelace-area = shoelace-area + mat2-determinant(mat2.new({ a: position.x, b: next-position.x, c: position.y, d: next-position.y }));
    position = next-position;
  }

  shoelace-area = shoelace-area + mat2-determinant(mat2.new({ a: position.x, b: initial-position.x, c: position.y, d: initial-position.y }));

  let area = shoelace-area / 2;

  (area + (border-points / 2)) + 1
}

let solve-part-1 = (input: string): string -> {
  let plan-steps = parse-input(input);
  let steps = [];

  for plan-step in plan-steps {
    steps.push(step.new({ direction: plan-step.direction, distance: plan-step.distance }));
  }

  let result = calculate-area-from-steps(steps);

  string-from-number(result)
}

let solve-part-2 = (input: string): string -> {
  let plan-steps = parse-input(input);
  let steps = [];
  let ordered-directions = [direction-east(), direction-south(), direction-west(), direction-north()];

  for plan-step in plan-steps {
    let distance-hex = plan-step.color.slice(2, 7);
    let distance = ("0x".concat(distance-hex.to-upper())).to-i64();
    let direction-num = plan-step.color.get(7) -  '0' ;

    steps.push(step.new({ direction: ordered-directions.get(direction-num), distance: distance }));
  }

  let result = calculate-area-from-steps(steps);

  string-from-number(result)
}

let input = get-input();
let part-1 = solve-part-1(input);

assert-equal(part-1, "44436");

let part-2 = solve-part-2(input);

assert-equal(part-2, "106941819907437");
