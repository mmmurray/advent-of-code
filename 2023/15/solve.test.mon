import { array-create, array-get, array-set } from "@array";
import { assert-equal } from "@assert";
import { list, list-from-array } from "@list";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

data operation =
  | insert({ focal-length: i32, label: string })
  | remove({ label: string })

data step = { operation: operation, raw: string }

let parse-operation = (input: string): operation -> {
  let last-char = input.get((input.size() - 1));

  case {
    last-char ==  '-'  -> {
      let label = input.slice(0, (input.size() - 1));

      operation.remove({ label: label })
    };
    _ -> {
      let parts = input.split-by("=");

      operation.insert({ label: parts.get(0), focal-length: (parts.get(1)).to-i32() })
    };
  }
}

let parse-input = (input: string): list<step> -> {
  let parts = (input.trim()).split-by(",");
  let steps = [];

  for part in parts {
    let s = step.new({ raw: part, operation: parse-operation(part) });

    steps.push(s);
  }

  steps
}

let hash = (value: string): i32 -> {
  let result = 0;

  for char in value.to-list() {
    result = ((result + char) * 17) % 256;
  }

  result
}

let solve-part-1 = (input: string): string -> {
  let sequence = parse-input(input);
  let result = 0;

  for s in sequence {
    result = result + hash(s.raw);
  }

  string-from-number(result)
}

data lens = { focal-length: i32, label: string }

data box = { lenses: list<lens> }

let solve-part-2 = (input: string): string -> {
  let sequence = parse-input(input);
  let result = 0;
  let boxes = array-create(256);

  for _, i in list-from-array(boxes) {
    let b = box.new({ lenses: [] });

    array-set(boxes, i, b);
  }

  for s in sequence {
    let step-operation = s.operation;
    let step-label = match step-operation {
      insert({ label }) -> label;
      remove({ label }) -> label;
    };
    let box-index = hash(step-label);
    let b = array-get(boxes, box-index);
    let _ = match step-operation {
      insert({ label, focal-length }) -> {
        let replaced = false;

        for l, lens-index in b.lenses {
          let _ = case {
            l.label.equals(label) -> {
              l.focal-length = focal-length;
              replaced = true;
            };
            _ -> {};
          };
        }

        let _ = case {
          !(replaced) -> {
            let l = lens.new({ label: label, focal-length: focal-length });

            b.lenses.push(l);
          };
          _ -> {};
        };
      };
      remove({ label }) -> {
        let remove-index = --(1);

        for l, lens-index in b.lenses {
          let _ = case {
            l.label.equals(label) -> {
              remove-index = lens-index;
            };
            _ -> {};
          };
        }

        let _ = case {
          remove-index >= 0 -> {
            b.lenses.remove(remove-index);
          };
          _ -> {};
        };
      };
    };
  }

  for b, box-index in list-from-array(boxes) {
    for l, lens-index in b.lenses {
      let focussing-power = (box-index + 1) * ((lens-index + 1) * l.focal-length);

      result = result + focussing-power;
    }
  }

  string-from-number(result)
}

let input = get-input();
let part-1 = solve-part-1(input);

assert-equal(part-1, "509152");

let part-2 = solve-part-2(input);

assert-equal(part-2, "244403");
