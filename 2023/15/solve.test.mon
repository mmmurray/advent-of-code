import { Array, arrayCreate, arrayGet, arraySet } from "@array";
import { assertEqual } from "@assert";
import { List, listFromArray } from "@list";
import { String, stringFromNumber } from "@string";
import { getValue: getInput } from "./input.txt";

data Operation =
  | Insert {
      label: String,
      focalLength: i32,
    }
  | Remove {
      label: String,
    }

data Step = {
  raw: String,
  operation: Operation,
}

let parseOperation = (input: String): Operation -> {
  let lastChar = input.get((input.size() - 1));

  case {
    lastChar == '-' -> {
      let label = input.slice(0, (input.size() - 1));

      Operation.Remove({ label: label })
    };
    _ -> {
      let parts = input.splitBy('=');

      Operation.Insert({ label: parts.get(0), focalLength: (parts.get(1)).toI32() })
    };
  }
}

let parseInput = (input: String): List<Step> -> {
  let parts = (input.trim()).splitBy(',');
  let steps = [];

  for part in parts {
    let step = Step.New({ raw: part, operation: parseOperation(part) });

    steps.push(step);
  }

  steps
}

let hash = (value: String): i32 -> {
  let result = 0;

  for char in value.toList() {
    result = ((result + char) * 17) % 256;
  }

  result
}

let solvePart1 = (input: String): String -> {
  let sequence = parseInput(input);
  let result = 0;

  for step in sequence {
    result = result + hash(step.raw);
  }

  stringFromNumber(result)
}

data Lens = {
  label: String,
  focalLength: i32,
}

data Box = {
  lenses: List<Lens>,
}

let solvePart2 = (input: String): String -> {
  let sequence = parseInput(input);
  let result = 0;
  let boxes = arrayCreate(256);

  for _, i in listFromArray(boxes) {
    let box = Box.New({ lenses: [] });

    arraySet(boxes, i, box);
  }

  for step in sequence {
    let stepOperation = step.operation;
    let stepLabel = match stepOperation {
      Insert { label } -> label;
      Remove { label } -> label;
    };
    let boxIndex = hash(stepLabel);
    let box = arrayGet(boxes, boxIndex);
    let _ = match stepOperation {
      Insert { label, focalLength } -> {
        let replaced = false;

        for lens, lensIndex in box.lenses {
          let _ = case {
            lens.label.equals(label) -> {
              lens.focalLength = focalLength;
              replaced = true;
            };
            _ -> {};
          };
        }

        let _ = case {
          !(replaced) -> {
            let lens = Lens.New({ label: label, focalLength: focalLength });

            box.lenses.push(lens);
          };
          _ -> {};
        };
      };
      Remove { label } -> {
        let removeIndex = --(1);

        for lens, lensIndex in box.lenses {
          let _ = case {
            lens.label.equals(label) -> {
              removeIndex = lensIndex;
            };
            _ -> {};
          };
        }

        let _ = case {
          removeIndex >= 0 -> {
            box.lenses.remove(removeIndex);
          };
          _ -> {};
        };
      };
    };
  }

  for box, boxIndex in listFromArray(boxes) {
    for lens, lensIndex in box.lenses {
      let focussingPower = (boxIndex + 1) * ((lensIndex + 1) * lens.focalLength);

      result = result + focussingPower;
    }
  }

  stringFromNumber(result)
}

let input = getInput();
let part1 = solvePart1(input);

assertEqual(part1, "509152");

let part2 = solvePart2(input);

assertEqual(part2, "244403");
