import { assert-equal } from "@assert";
import { list } from "@list";
import { max } from "@math";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

data selection = { blue: i32, green: i32, red: i32 }

data game = { id: i32, selections: list<selection> }

let parse-selection = (input: string): selection -> {
  let value-parts = input.split-by( ',' );
  let s = selection.new({ red: 0, blue: 0, green: 0 });

  for value-part in value-parts {
    let pair-parts = (value-part.trim()).split-by( ' ' );
    let value = (pair-parts.get(0)).to-i32();
    let color = pair-parts.get(1);
    let _ = case {
      color.equals("red") -> {
        s.red = value;
      };
      _ -> {};
    };
    let _ = case {
      color.equals("green") -> {
        s.green = value;
      };
      _ -> {};
    };
    let _ = case {
      color.equals("blue") -> {
        s.blue = value;
      };
      _ -> {};
    };
  }

  s
}

let parse-input-line = (line: string): game -> {
  let parts = line.split-by( ':' );
  let game-id-part = parts.get(0);
  let id-part = game-id-part.slice(5, game-id-part.size());
  let id = id-part.to-i32();
  let selections = [];
  let selections-part = (parts.get(1)).trim();
  let selection-parts = selections-part.split-by( ';' );
  let selection-index = 0;

  for selection-part in selection-parts {
    let selection = parse-selection(selection-part);

    selections.push(selection);

    selection-index = selection-index + 1;
  }

  game.new({ id: id, selections: selections })
}

let parse-input = (input: string): list<game> -> {
  let lines = input.to-lines();
  let games = [];

  for line in lines {
    let game = parse-input-line(line);

    games.push(game);
  }

  games
}

let solve-part-1 = (input: string): string -> {
  let games = parse-input(input);
  let result = 0;

  for game in games {
    let possible = true;

    for selection in game.selections {
      let _ = case {
        (selection.red > 12) || ((selection.green > 13) || (selection.blue > 14)) -> {
          possible = false;
        };
        _ -> {};
      };
    }

    let _ = case {
      possible -> {
        result = result + game.id;
      };
      _ -> {};
    };
  }

  string-from-number(result)
}

let solve-part-2 = (input: string): string -> {
  let games = parse-input(input);
  let result = 0;

  for game in games {
    let min-selection = selection.new({ red: 0, green: 0, blue: 0 });

    for selection in game.selections {
      min-selection.red = max(min-selection.red, selection.red);
      min-selection.green = max(min-selection.green, selection.green);
      min-selection.blue = max(min-selection.blue, selection.blue);
    }

    let power = min-selection.red * (min-selection.blue * min-selection.green);

    result = result + power;
  }

  string-from-number(result)
}

let input = (get-input()).trim();
let part1 = solve-part-1(input);

assert-equal(part1, "1853");

let part2 = solve-part-2(input);

assert-equal(part2, "72706");
