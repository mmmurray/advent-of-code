import { assertEqualString } from "@assert";
import { List } from "@list";
import { max } from "@math";
import { String, stringEquals, stringFromNumber } from "@string";
import { getValue: getInput } from "./input.txt";

data Selection = {
  red: i32,
  blue: i32,
  green: i32,
}

data Game = {
  id: i32,
  selections: List<Selection>,
}

let parseSelection = (input: String): Selection -> {
  let valueParts = input.splitBy(',');
  let selection = Selection.New({ red: 0, blue: 0, green: 0 });

  for valuePart in valueParts {
    let pairParts = (valuePart.trim()).splitBy(' ');
    let value = (pairParts.get(0)).toI32();
    let color = pairParts.get(1);

    if stringEquals(color, "red") {
      selection.red = value;
    }

    if stringEquals(color, "green") {
      selection.green = value;
    }

    if stringEquals(color, "blue") {
      selection.blue = value;
    }
  }

  selection
}

let parseInputLine = (line: String): Game -> {
  let parts = line.splitBy(':');
  let gameIdPart = parts.get(0);
  let idPart = gameIdPart.slice(5, gameIdPart.size());
  let id = idPart.toI32();
  let selections = [];
  let selectionsPart = (parts.get(1)).trim();
  let selectionParts = selectionsPart.splitBy(';');
  let selectionIndex = 0;

  for selectionPart in selectionParts {
    let selection = parseSelection(selectionPart);

    selections.push(selection);

    selectionIndex = (selectionIndex + 1);
  }

  Game.New({ id: id, selections: selections })
}

let parseInput = (input: String): List<Game> -> {
  let lines = (input).toLines();
  let games = [];

  for line in lines {
    let game = parseInputLine(line);

    games.push(game);
  }

  games
}

let solvePart1 = (input: String): String -> {
  let games = parseInput(input);
  let result = 0;

  for game in games {
    let possible = true;

    for selection in game.selections {
      if ((selection.red > 12) || ((selection.green > 13) || (selection.blue > 14))) {
        possible = false;
      }
    }

    if possible {
      result = (result + game.id);
    }
  }

  stringFromNumber(result)
}

let solvePart2 = (input: String): String -> {
  let games = parseInput(input);
  let result = 0;

  for game in games {
    let minSelection = Selection.New({ red: 0, green: 0, blue: 0 });

    for selection in game.selections {
      minSelection.red = max(minSelection.red, selection.red);
      minSelection.green = max(minSelection.green, selection.green);
      minSelection.blue = max(minSelection.blue, selection.blue);
    }

    let power = (minSelection.red * (minSelection.blue * minSelection.green));

    result = (result + power);
  }

  stringFromNumber(result)
}

let input = (getInput()).trim();
let part1 = solvePart1(input);

assertEqualString(part1, "1853");

let part2 = solvePart2(input);

assertEqualString(part2, "72706");
