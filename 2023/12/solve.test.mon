import { array, array-create, array-get, array-set } from "@array";
import { assert-equal } from "@assert";
import { list, list-from-array } from "@list";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

data row = { conditions: list<i32>, damage-total: i32, damaged: list<i32> }

let parse-row = (line: string): row -> {
  let parts = line.split-by(" ");
  let conditions = [];

  for char in (parts.get(0)).to-list() {
    conditions.push(char);
  }

  let damaged = [];
  let damaged-parts = (parts.get(1)).split-by(",");
  let damage-total = 0;

  for damaged-part in damaged-parts {
    let damage = damaged-part.to-i32();

    damaged.push(damage);

    damage-total = damage-total + damage;
  }

  row.new({ conditions: conditions, damaged: damaged, damage-total: damage-total })
}

let parse-input = (input: string): list<row> -> {
  let lines = (input.trim()).to-lines();
  let rows = [];

  for line in lines {
    rows.push(parse-row(line));
  }

  rows
}

let cache-spacing = (): i32 -> 30

let create-cache = (): array<i32> -> {
  let cache = array-create((cache-spacing() * (cache-spacing() * cache-spacing())));

  for _, i in list-from-array(cache) {
    array-set(cache, i, --(1));
  }

  cache
}

let place-damage = (conditions: list<i32>, offset: i32, width: i32): list<i32> -> {
  let new-conditions = conditions.clone();

  for condition, index in conditions {
    let _ = case {
      condition ==  '?'  -> {
        new-conditions.set(index,  '.' );
      };
      _ -> {};
    };
    let _ = case {
      index >= offset -> {
        new-conditions.set(index,  '#' );
      };
      _ -> {};
    };
    let _ = case {
      index >= (offset + width) -> {
        new-conditions.set(index, conditions.get(index));
      };
      _ -> {};
    };
  }

  new-conditions
}

let conditions-contain-dot = (conditions: list<i32>): boolean -> {
  let result = false;

  for condition in conditions {
    let _ = case {
      condition ==  '.'  -> {
        result = true;
      };
      _ -> {};
    };
  }

  result
}

let is-valid-placement = (conditions: list<i32>, max-damage: i32, offset: i32, width: i32): boolean -> {
  let prev-index = offset - 1;
  let next-index = offset + width;

  case {
    (offset + width) > conditions.size() -> false;
    conditions-contain-dot(conditions.slice(offset, (offset + width))) -> false;
    (prev-index >= 0) && (conditions.get(prev-index) ==  '#' ) -> false;
    (next-index < (conditions.size() - 1)) && (conditions.get(next-index) ==  '#' ) -> false;
    _ -> {
      let damage-total = 0;

      for condition2 in place-damage(conditions, offset, width) {
        let _ = case {
          condition2 ==  '#'  -> {
            damage-total = damage-total + 1;
          };
          _ -> {};
        };
      }

      damage-total <= max-damage
    };
  }
}

let count-arrangements-rec = (cache: array<i32>, r: row, offset: i32, damaged-index: i32): i32 -> {
  let damage-total = 0;

  for condition2 in r.conditions {
    let _ = case {
      condition2 ==  '#'  -> {
        damage-total = damage-total + 1;
      };
      _ -> {};
    };
  }

  let cache-key = damaged-index + ((cache-spacing() * offset) + (damage-total * (cache-spacing() * cache-spacing())));
  let cached = array-get(cache, cache-key);

  case {
    cached >= 0 -> cached;
    offset >= r.conditions.size() -> 0;
    _ -> {
      let arrangements = 0;
      let damage-width = r.damaged.get(damaged-index);
      let valid = is-valid-placement(r.conditions, r.damage-total, offset, damage-width);
      let _ = case {
        valid -> {
          let next-conditions = place-damage(r.conditions, offset, damage-width);
          let next-damaged-index = damaged-index + 1;
          let next-offset = offset + (damage-width + 1);
          let _ = case {
            next-damaged-index < r.damaged.size() -> {
              let new-row = row.new({
                conditions: next-conditions,
                damaged: r.damaged,
                damage-total: r.damage-total,
              });

              arrangements = arrangements + count-arrangements-rec(cache, new-row, next-offset, next-damaged-index);
            };
            _ -> {
              arrangements = arrangements + 1;
            };
          };
        };
        _ -> {};
      };

      arrangements = arrangements + count-arrangements-rec(cache, r, (offset + 1), damaged-index);

      array-set(cache, cache-key, arrangements);

      arrangements
    };
  }
}

let count-arrangements = (r: row): i32 -> {
  count-arrangements-rec(create-cache(), r, 0, 0)
}

let unfold-row = (r: row): row -> {
  row.new({
    conditions: [
      ...r.conditions,
       '?' ,
      ...r.conditions,
       '?' ,
      ...r.conditions,
       '?' ,
      ...r.conditions,
       '?' ,
      ...r.conditions,
    ],
    damaged: [...r.damaged, ...r.damaged, ...r.damaged, ...r.damaged, ...r.damaged],
    damage-total: (r.damage-total * 5),
  })
}

let unfold-rows = (rows: list<row>): list<row> -> {
  let new-rows = [];

  for r in rows {
    new-rows.push(unfold-row(r));
  }

  new-rows
}

let test-count-arrangements = (): unit -> {
  assert-equal(count-arrangements(parse-row("? 1")), 1);
  assert-equal(count-arrangements(parse-row("?? 1")), 2);
  assert-equal(count-arrangements(parse-row("??? 1")), 3);
  assert-equal(count-arrangements(parse-row("??? 2")), 2);
  assert-equal(count-arrangements(parse-row("??? 1,1")), 1);
  assert-equal(count-arrangements(parse-row("??? 3")), 1);
  assert-equal(count-arrangements(parse-row("??? 4")), 0);
  assert-equal(count-arrangements(parse-row("#?? 1")), 1);
  assert-equal(count-arrangements(parse-row("#?? 2")), 1);
  assert-equal(count-arrangements(parse-row("#.. 2")), 0);
  assert-equal(count-arrangements(parse-row("### 2")), 0);
  assert-equal(count-arrangements(parse-row(".## 2")), 1);
  assert-equal(count-arrangements(parse-row("?????#???? 2,1,1")), 11);
}

let solve-part-1 = (input: string): string -> {
  let rows = parse-input(input);
  let result = 0;

  for r in rows {
    result = result + count-arrangements(r);
  }

  string-from-number(result)
}

let _solve-part-2 = (input: string): string -> {
  let rows = unfold-rows(parse-input(input));
  let result = 0;

  for r in rows {
    result = result + count-arrangements(r);
  }

  string-from-number(result)
}

test-count-arrangements();

let input = get-input();
let part-1 = solve-part-1(input);

assert-equal(part-1, "7204");

# todo
# let part-2 = (solvePart2 input)
# (assertEqual part-2 "???")
