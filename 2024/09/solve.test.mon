import { assert-equal } from "@assert";
import { grid, grid-create, grid-from-string } from "@grid";
import { list-from-range, list } from "@list";
import { map, map-create } from "@map";
import { pair, pair-create } from "@pair";
import { set, set-create } from "@set";
import { string } from "@string";
import { vec2, vec2-create } from "@vec2";
import { get-value: get-example } from "./example.txt";
import { get-value: get-input } from "./input.txt";

let parse-input = (input: string): list<i32> -> {
  input.trim().split-by("").map((part: string) -> part.to-i32())
}

let print-disk = (disk: list<i32>): unit -> {
  $log(disk.map((block: i32) -> case {
    block == 0 -> ".";
    _ -> (block - 1).to-string();
  }).join-by(""));
}

let solve-part-1 = (input: string): i64 -> {
  let disk-map = parse-input(input);
  let disk = disk-map.reduce-indexed([], (acc: list<i32>, x: i32, i: i32) -> {
    let id = case {
      (i % 2) == 0 -> i / 2 + 1;
      _ -> 0;
    };

    [...acc, ...list-from-range(0, x, 1).map((z: i32) -> id)]
  });

  # print-disk(disk);

  let start = 0;
  let length = disk.size();
  let end = length - 1;
  while start < length && start < end {
    let a = disk.get(start);
    let b = disk.get(end);

    disk = case {
      a == 0 && b > 0 -> {
        disk.set(start, b);
        disk.set(end, 0);
        # print-disk(disk);
        disk
      };
      a == 0 -> {
        end = end - 1;
        disk
      };
      _ -> {
        start = start + 1;
        disk
      };
    };
  }

  disk.reduce-indexed(0, (acc: i64, x: i32, i: i32) -> case {
    x == 0 -> acc;
    _ -> acc + $i64(((x - 1) * i));
  })
}

let solve-part-2 = (input: string): i64 -> {
  0
}

assert-equal(solve-part-1(get-example()), 1928);
assert-equal(solve-part-1(get-input()), 6385338159127);
# assert-equal(solve-part-2(get-example()), 0);
# assert-equal(solve-part-2(get-input()), 0);
