import { assert-equal } from "@assert";
import { grid-from-string } from "@grid";
import { pair, pair-create } from "@pair";
import { set, set-create } from "@set";
import { string } from "@string";
import { vec2, vec2-create } from "@vec2";
import { get-value: get-example } from "./example.txt";
import { get-value: get-input } from "./input.txt";

data world = {
  height: i32,
  initial-guard: pair<vec2<i32>, vec2<i32>>,
  walls: set<vec2<i32>>,
  width: i32,
}

let parse-input = (input: string): world -> {
  let g = grid-from-string(input.trim());

  g.reduce(world.new({
    width: g.width,
    height: g.height,
    initial-guard: pair-create(vec2-create(0, 0), vec2-create(0, 0)),
    walls: set-create(),
  }), (acc: world, cell: i32, x: i32, y: i32) -> {
    case {
      cell ==  '#'  -> {
        acc.walls.add(vec2-create(x, y));

        acc
      };
      cell ==  '^'  -> {
        acc.initial-guard = pair-create(vec2-create(x, y), vec2-create(0, --(1)));

        acc
      };
      _ -> acc;
    }
  })
}

let rotate-right = (direction: vec2<i32>): vec2<i32> -> {
  vec2-create(--(direction.y), direction.x)
}

let evolve = (w: world, guard: pair<vec2<i32>, vec2<i32>>): pair<vec2<i32>, vec2<i32>> -> {
  let position = guard.first();
  let direction = guard.second();
  let ahead = position.add(direction);

  case {
    w.walls.contains(ahead) -> pair-create(position, rotate-right(direction));
    _ -> pair-create(ahead, direction);
  }
}

let is-outside = (w: world, guard: pair<vec2<i32>, vec2<i32>>): boolean -> {
  let position = guard.first();

  position.x < 0 || position.x >= w.width || position.y < 0 || position.y >= w.height
}

let solve-part-1 = (input: string): i32 -> {
  let w = parse-input(input);
  let visited = set-create();
  let guard = w.initial-guard;

  while !(is-outside(w, guard)) {
    visited.add(guard.first());

    guard = evolve(w, guard);
  }

  visited.size()
}

let results-in-loop = (w: world): boolean -> {
  let visited = set-create();
  let guard = w.initial-guard;
  let found-loop = false;

  while !(is-outside(w, guard)) && !(found-loop) {
    visited.add(guard);

    guard = evolve(w, guard);
    found-loop = visited.contains(guard);
  }

  found-loop
}

let world-with-wall = (w: world, wall: vec2<i32>): world -> {
  let new-walls = w.walls.clone().add(wall);

  world.new({
    width: w.width,
    height: w.height,
    initial-guard: w.initial-guard,
    walls: new-walls,
  })
}

let solve-part-2 = (input: string): i32 -> {
  let w = parse-input(input);
  let result = 0;
  let y = 0;

  while y < w.height {
    let x = 0;

    while x < w.width {
      let p = vec2-create(x, y);

      w = parse-input(input);
      result = case {
        w.walls.contains(p) -> result;
        p.equals(w.initial-guard.first()) -> result;
        results-in-loop(world-with-wall(w, p)) -> result + 1;
        _ -> result;
      };
      x = x + 1;
    }

    y = y + 1;
  }

  result
}

assert-equal(solve-part-1(get-example()), 41);
assert-equal(solve-part-1(get-input()), 4758);
assert-equal(solve-part-2(get-example()), 6);

# assert-equal(solve-part-2(get-input()), 1670);
