import { assert-equal } from "@assert";
import {
  grid,
  grid-compass-4,
  grid-east,
  grid-from-string,
  grid-north,
  grid-north-east,
  grid-north-west,
  grid-south,
  grid-south-east,
  grid-south-west,
  grid-west,
} from "@grid";
import { list } from "@list";
import { set, set-create } from "@set";
import { string } from "@string";
import { vec2, vec2-create } from "@vec2";
import { get-value: get-example } from "./example.txt";

let parse-input = (input: string): grid<i32, i32> -> {
  grid-from-string(input.trim())
}

let flood-fill = (world: grid<i32, i32>, region-type: i32, acc: set<vec2<i32>>, position: vec2<i32>): set<vec2<i32>> -> {
  let type = world.get-safe(position.x, position.y).or(0);

  case {
    acc.contains(position) -> acc;
    type != region-type -> acc;
    _ -> grid-compass-4().reduce(acc.add(position), (acc2: set<vec2<i32>>, direction: vec2<i32>) -> {
      let next-position = position.add(direction);

      flood-fill(world, region-type, acc, next-position)
    });
  }
}

let get-regions = (world: grid<i32, i32>): list<set<vec2<i32>>> -> {
  let regions = world.reduce([], (acc: list<set<vec2<i32>>>, type: i32, x: i32, y: i32) -> {
    let position = vec2-create(x, y);

    case {
      type ==  '.'  -> acc;
      acc.some((region: set<vec2<i32>>) -> region.contains(position)) -> acc;
      _ -> acc.push(flood-fill(world, type, set-create(), position));
    }
  });

  regions
}

let get-region-perimeter = (region: set<vec2<i32>>): i32 -> {
  region.values().map((position: vec2<i32>) -> {
    let outside-face-count = grid-compass-4().map((direction: vec2<i32>) -> case {
      region.contains(position.add(direction)) -> 0;
      _ -> 1;
    }).sum();

    outside-face-count
  }).sum()
}

let grid-magnify = <t, u:number>(self: grid<t, u>, factor: u): grid<t, u> -> {
  let width = self.width * factor;
  let height = self.height * factor;
  let count = width * height;
  let cells = $arrayCreate($i32(count));
  let y = 0;

  while y < height {
    let x = 0;

    while x < width {
      let i = $i32((y * width) + x);
      let cell = self.get(x / factor, y / factor);

      $arraySet(cells, i, cell);

      x = x + 1;
    }

    y = y + 1;
  }

  grid.new({ cells: cells, width: width, height: height })
}

let get-region-corners = (world: grid<i32, i32>, region: set<vec2<i32>>): i32 -> {
  region.values().map((position: vec2<i32>) -> {
    let neighbours-orthogonal = [grid-north(), grid-east(), grid-south(), grid-west()].map((direction: vec2<i32>) -> case {
      region.contains(position.add(direction)) -> 1;
      _ -> 0;
    }).sum();
    let neighbours-diagonal = [grid-north-east(), grid-south-east(), grid-south-west(), grid-north-west()].map((direction: vec2<i32>) -> case {
      region.contains(position.add(direction)) -> 1;
      _ -> 0;
    }).sum();

    case {
      neighbours-orthogonal == 2 -> 1;
      neighbours-orthogonal == 4 && neighbours-diagonal == 3 -> 1;
      _ -> 0;
    }
  }).sum()
}

let solve-part-1 = (input: string): i32 -> {
  let world = parse-input(input);
  let regions = get-regions(world);
  let total-price = regions.map((region: set<vec2<i32>>) -> {
    let area = region.size();
    let perimeter = get-region-perimeter(region);

    area * perimeter
  }).sum();

  total-price
}

let solve-part-2 = (input: string): i32 -> {
  let world = parse-input(input);

  world = grid-magnify(world, 2);

  let regions = get-regions(world);
  let total-price = regions.map((region: set<vec2<i32>>) -> {
    let area = region.size() / 4;
    let corners = get-region-corners(world, region);

    area * corners
  }).sum();

  total-price
}

assert-equal(solve-part-1(get-example()), 1930);

# assert-equal(solve-part-1(get-input()), 1352976);

assert-equal(solve-part-2(get-example()), 1206);

# assert-equal(solve-part-2(get-input()), 808796);
