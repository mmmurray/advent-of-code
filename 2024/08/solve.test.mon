import { assert-equal } from "@assert";
import { grid, grid-create, grid-from-string } from "@grid";
import { list } from "@list";
import { map, map-create } from "@map";
import { pair, pair-create } from "@pair";
import { set, set-create } from "@set";
import { string } from "@string";
import { vec2, vec2-create } from "@vec2";
import { get-value: get-example } from "./example.txt";
import { get-value: get-input } from "./input.txt";

let distinct-pairs = <t>(values: list<t>): list<pair<t, t>> -> {
  let result = [];
  let i = 0;

  while i < values.size() {
    let j = i + 1;

    while j < values.size() {
      result.push(pair-create(values.get(i), values.get(j)));

      j = j + 1;
    }

    i = i + 1;
  }

  result
}

let is-in-grid = <t, u:number>(self: grid<t, u>, p: vec2<u>): boolean -> {
  p.x >= 0 && p.x < self.width && p.y >= 0 && p.y < self.height
}

let parse-input = (input: string): grid<i32, i32> -> {
  grid-from-string(input.trim())
}

let get-antennas-by-frequency = (nodes: grid<i32, i32>): map<i32, set<vec2<i32>>> -> {
  nodes.reduce(map-create(), (acc: map<i32, set<vec2<i32>>>, cell: i32, x: i32, y: i32) -> {
    case {
      cell ==  '.'  -> acc;
      _ -> {
        let antennas = acc.get(cell).or(set-create());

        acc.set(cell, antennas.add(vec2-create(x, y)))
      };
    }
  })
}

data context = { get-antinodes: (vec2<i32>, vec2<i32> -> list<vec2<i32>>) }

let count-antinodes = (nodes: grid<i32, i32>, c: context): i32 -> {
  let antinodes = grid-create(nodes.width, nodes.height, (x: i32, y: i32) -> 0);

  antinodes = get-antennas-by-frequency(nodes).values().reduce(antinodes, (acc: grid<i32, i32>, nodes: set<vec2<i32>>) -> {
    let node-pairs = distinct-pairs(nodes.values());

    node-pairs.reduce(acc, (acc1: grid<i32, i32>, node-pair: pair<vec2<i32>, vec2<i32>>) -> {
      let fn = c.get-antinodes;

      fn(node-pair.first(), node-pair.second()).reduce(acc1, (acc2: grid<i32, i32>, p: vec2<i32>) -> {
        acc2.set(p.x, p.y, 1)
      })
    })
  });

  let result = antinodes.reduce(0, (acc: i32, count: i32, x: i32, y: i32) -> acc + count);

  result
}

let solve-part-1 = (input: string): i32 -> {
  let nodes = parse-input(input);

  count-antinodes(nodes, context.new({
    get-antinodes: (a: vec2<i32>, b: vec2<i32>) -> {
      let delta = b.sub(a);

      [a.sub(delta), b.add(delta)]
    },
  }))
}

let solve-part-2 = (input: string): i32 -> {
  let nodes = parse-input(input);

  count-antinodes(nodes, context.new({
    get-antinodes: (a: vec2<i32>, b: vec2<i32>) -> {
      let antinodes = [];
      let delta = b.sub(a);
      let antinode-a = a;

      while is-in-grid(nodes, antinode-a) {
        antinodes.push(antinode-a);

        antinode-a = antinode-a.sub(delta);
      }

      let antinode-b = b;

      while is-in-grid(nodes, antinode-b) {
        antinodes.push(antinode-b);

        antinode-b = antinode-b.add(delta);
      }

      antinodes
    },
  }))
}

assert-equal(solve-part-1(get-example()), 14);
assert-equal(solve-part-1(get-input()), 329);
assert-equal(solve-part-2(get-example()), 34);
assert-equal(solve-part-2(get-input()), 1190);
