import { assert-equal } from "@assert";
import { list-from-range } from "@list";
import { map, map-create, map-entry } from "@map";
import { string } from "@string";
import { get-value: get-example } from "./example.txt";
import { get-value: get-input } from "./input.txt";

let parse-input = (input: string): map<i64, i64> -> {
  input.trim().split-by(" ").map((part: string) -> part.to-i64()).reduce(map-create(), (acc: map<i64, i64>, num: i64) -> {
    acc.set(num, acc.get(num).or(0) + 1)
  })
}

let increment-count = (stones: map<i64, i64>, stone: i64, increment: i64): map<i64, i64> -> {
  stones.set(stone, stones.get(stone).or(0) + increment)
}

let evolve = (stones: map<i64, i64>): map<i64, i64> -> {
  stones.entries().reduce(map-create(), (acc: map<i64, i64>, entry: map-entry<i64, i64>) -> {
    let stone = entry.key;
    let stone-str = stone.to-string();
    let count = entry.value;

    case {
      stone == 0 -> increment-count(acc, 1, count);
      stone-str.size() % 2 == 0 -> {
        let a = stone-str.slice(0, stone-str.size() / 2).to-i64();
        let b = stone-str.slice(stone-str.size() / 2, stone-str.size()).to-i64();

        acc = increment-count(acc, a, count);
        acc = increment-count(acc, b, count);

        acc
      };
      _ -> increment-count(acc, stone * 2024, count);
    }
  })
}

let count-stones-after-steps = (input: string, steps: i64): i64 -> {
  let initial-stones = parse-input(input);
  let final-stones = list-from-range(0, steps, 1).reduce(initial-stones, (acc: map<i64, i64>, step: i64) -> evolve(acc));
  let stones-count = final-stones.values().reduce(0, (acc: i64, count: i64) -> acc + count);

  stones-count
}

let solve-part-1 = (input: string): i64 -> count-stones-after-steps(input, 25)

let solve-part-2 = (input: string): i64 -> count-stones-after-steps(input, 75)

assert-equal(solve-part-1(get-example()), 55312);
assert-equal(solve-part-1(get-input()), 213625);
assert-equal(solve-part-2(get-input()), 252442982856820);
