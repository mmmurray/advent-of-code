import { assert-equal } from "@assert";
import { char-is-numeric } from "@char";
import { list } from "@list";
import { option, option-none, option-some } from "@option";
import { string } from "@string";
import { get-value: get-input } from "./input.txt";

data expression =
  | mul({ left: i32, right: i32 })
  | enable
  | disable

data parse-result<t> = { offset: i32, value: t }

let parse-literal = (source: string, offset: i32, literal: string): option<parse-result<string>> -> case {
  source.contains-at(literal, offset) -> {
    option-some(parse-result.new({ offset: offset + literal.size(), value: literal }))
  };
  _ -> option-none();
}

let parse-number = (source: string, offset: i32): option<parse-result<i32>> -> {
  let find-end = (source: string, offset: i32): i32 -> {
    case {
      char-is-numeric(source.get(offset)) -> find-end(source, offset + 1);
      _ -> offset;
    }
  }

  let end = find-end(source, offset);

  case {
    end > offset -> option-some(parse-result.new({ offset: end, value: source.slice(offset, end).to-i32() }));
    _ -> option-none();
  }
}

let parse-expression-mul = (source: string, offset: i32): option<parse-result<expression>> -> {
  let open-result <- parse-literal(source, offset, "mul(");
  let offset = open-result.offset;
  let left-result <- parse-number(source, offset);
  let offset = left-result.offset;
  let comma-result <- parse-literal(source, offset, ",");
  let offset = comma-result.offset;
  let right-result <- parse-number(source, offset);
  let offset = right-result.offset;
  let close-result <- parse-literal(source, offset, ")");
  let offset = close-result.offset;
  let value = expression.mul({ left: left-result.value, right: right-result.value });

  option-some(parse-result.new({ offset: offset, value: value }))
}

let parse-expression-enable = (source: string, offset: i32): option<parse-result<expression>> -> {
  let literal-result <- parse-literal(source, offset, "do()");
  let offset = literal-result.offset;
  let value = expression.enable();

  option-some(parse-result.new({ offset: offset, value: value }))
}

let parse-expression-disable = (source: string, offset: i32): option<parse-result<expression>> -> {
  let literal-result <- parse-literal(source, offset, "don't()");
  let offset = literal-result.offset;
  let value = expression.disable();

  option-some(parse-result.new({ offset: offset, value: value }))
}

let parse-expression = (source: string, offset: i32): option<parse-result<expression>> -> {
  let result <- [
    parse-expression-mul(source, offset),
    parse-expression-enable(source, offset),
    parse-expression-disable(source, offset),
  ].find((result: option<parse-result<expression>>) -> result.is-some());

  result.second()
}

let parse-expressions = (source: string): list<expression> -> {
  let rec = (acc: list<expression>, source: string, offset: i32): list<expression> -> {
    case {
      offset == source.size() -> acc;
      _ -> {
        let parse-result = parse-expression(source, offset);
        let next-acc = match parse-result {
          some({ value }) -> [...acc, value.value];
          _ -> acc;
        };
        let next-offset = match parse-result {
          some({ value }) -> value.offset;
          _ -> offset + 1;
        };
        let expressions = rec(next-acc, source, next-offset);

        expressions
      };
    }
  }

  rec([], source, 0)
}

let solve-part-1 = (input: string): string -> {
  let expressions = parse-expressions(input);
  let result = expressions.reduce(0, (acc: i32, e: expression) -> {
    match e {
      mul({ left, right }) -> acc + left * right;
      _ -> acc;
    }
  });

  result.to-string()
}

let solve-part-2 = (input: string): string -> {
  data state = { enabled: boolean, total: i32 }

  let expressions = parse-expressions(input);
  let result = expressions.reduce(state.new({ enabled: true, total: 0 }), (acc: state, e: expression) -> {
    match e {
      mul({ left, right }) -> case {
        acc.enabled -> state.new({ enabled: true, total: acc.total + left * right });
        _ -> acc;
      };
      enable -> state.new({ enabled: true, total: acc.total });
      disable -> state.new({ enabled: false, total: acc.total });
    }
  });

  result.total.to-string()
}

assert-equal(solve-part-1(get-input()), "180233229");
assert-equal(solve-part-2(get-input()), "95411583");
