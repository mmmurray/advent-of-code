import { assert-equal } from "@assert";
import { list } from "@list";
import { map, map-create } from "@map";
import { abs } from "@math";
import { string, string-from-number } from "@string";
import { get-value: get-input } from "./input.txt";

data lists = { as: list<i32>, bs: list<i32> }

let parse-input = (input: string): lists -> {
  input.to-lines().reduce(lists.new({ as: [], bs: [] }), (acc: lists, line: string): lists -> {
    let space-index = line.index-of("   ");
    let a-str = line.slice(0, space-index);
    let b-str = line.slice(space-index + 3, line.size());

    acc.as.push(a-str.to-i32());
    acc.bs.push(b-str.to-i32());

    acc
  })
}

let solve-part-1 = (input: string): string -> {
  let lists = parse-input(input);
  let as = lists.as.sort();
  let bs = lists.bs.sort();
  let result = as.reduce-indexed(0, (acc: i32, a: i32, index: i32): i32 -> {
    let b = bs.get(index);

    acc + abs(a - b)
  });

  string-from-number(result)
}

let solve-part-2 = (input: string): string -> {
  let lists = parse-input(input);
  let occurrences = lists.bs.reduce(map-create(), (acc: map<i32, i32>, b: i32): map<i32, i32> -> {
    let count = acc.get(b).or(0);

    acc.set(b, count + 1)
  });
  let result = lists.as.reduce(0, (acc: i32, a: i32): i32 -> {
    let count = occurrences.get(a).or(0);

    acc + a * count
  });

  string-from-number(result)
}

let input = (get-input()).trim();
let part1 = solve-part-1(input);

assert-equal(part1, "1970720");

let part2 = solve-part-2(input);

assert-equal(part2, "17191599");
