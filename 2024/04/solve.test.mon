import { assert-equal } from "@assert";
import { grid, grid-compass-8, grid-from-string } from "@grid";
import { string } from "@string";
import { vec2 } from "@vec2";
import { get-value: get-input } from "./input.txt";

let search-in-direction = (target: string, index: i32, g: grid<i32, i32>, x: i32, y: i32, dx: i32, dy: i32): boolean -> {
  case {
    index == target.size() -> true;
    _ -> match g.get-safe(x, y) {
      some({ value }) -> case {
        value == target.get(index) -> search-in-direction(target, index + 1, g, x + dx, y + dy, dx, dy);
        _ -> false;
      };
      _ -> false;
    };
  }
}

let solve-part-1 = (input: string): string -> {
  let grid = grid-from-string(input);
  let result = grid.reduce(0, (acc: i32, char: i32, x: i32, y: i32) -> {
    let found = grid-compass-8().reduce(0, (acc: i32, dir: vec2<i32>) -> case {
      search-in-direction("XMAS", 0, grid, x, y, dir.x, dir.y) -> acc + 1;
      _ -> acc;
    });

    acc + found
  });

  result.to-string()
}

let solve-part-2 = (input: string): string -> {
  let grid = grid-from-string(input);
  let result = grid-from-string(input).reduce(0, (acc: i32, char: i32, x: i32, y: i32) -> {
    let diag-1 = search-in-direction("MAS", 0, grid, x, y, 1, 1) || search-in-direction("SAM", 0, grid, x, y, 1, 1);
    let diag-2 = search-in-direction("MAS", 0, grid, x, y + 2, 1, --(1)) || search-in-direction("SAM", 0, grid, x, y + 2, 1, --(1));
    let found = case {
      diag-1 && diag-2 -> 1;
      _ -> 0;
    };

    acc + found
  });

  result.to-string()
}

assert-equal(solve-part-1(get-input()), "2378");
assert-equal(solve-part-2(get-input()), "1796");
