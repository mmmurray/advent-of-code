import { assert-equal } from "@assert";
import { list } from "@list";
import { order } from "@order";
import { pair, pair-create } from "@pair";
import { set, set-create } from "@set";
import { string } from "@string";
import { get-value: get-example } from "./example.txt";
import { get-value: get-input } from "./input.txt";

data print-job = { rules: set<pair<i32, i32>>, updates: list<list<i32>> }

let parse-input = (input: string): print-job -> {
  let sections = input.trim().split-by("\n\n");
  let rules = sections.get(0).to-lines().reduce(set-create(), (acc: set<pair<i32, i32>>, line: string) -> {
    let parts = line.split-by("|");

    acc.add(pair-create(parts.get(0).to-i32(), parts.get(1).to-i32()))
  });
  let updates = sections.get(1).to-lines().map((line: string): list<i32> -> {
    line.split-by(",").map((part: string) -> part.to-i32())
  });

  print-job.new({ rules: rules, updates: updates })
}

let pages-order = (rules: set<pair<i32, i32>>, page-a: i32, page-b: i32): order -> {
  case {
    rules.contains(pair-create(page-a, page-b)) -> order.less();
    rules.contains(pair-create(page-b, page-a)) -> order.more();
    _ -> order.same();
  }
}

let is-update-sorted = (rules: set<pair<i32, i32>>, update: list<i32>): boolean -> {
  update.is-sorted-by-pairs((page-a: i32, page-b: i32) -> pages-order(rules, page-a, page-b))
}

let sort-update = (rules: set<pair<i32, i32>>, update: list<i32>): list<i32> -> {
  update.sort-by-pairs((page-a: i32, page-b: i32) -> pages-order(rules, page-a, page-b))
}

let middle-page = (update: list<i32>): i32 -> update.get(update.size() / 2)

let solve-part-1 = (input: string): i32 -> {
  let print-job = parse-input(input);

  print-job.updates.map((update: list<i32>) -> case {
    is-update-sorted(print-job.rules, update) -> middle-page(update);
    _ -> 0;
  }).sum()
}

let solve-part-2 = (input: string): i32 -> {
  let print-job = parse-input(input);

  print-job.updates.map((update: list<i32>) -> case {
    is-update-sorted(print-job.rules, update) -> 0;
    _ -> middle-page(sort-update(print-job.rules, update));
  }).sum()
}

assert-equal(solve-part-1(get-example()), 143);
assert-equal(solve-part-1(get-input()), 5248);
assert-equal(solve-part-2(get-example()), 123);
assert-equal(solve-part-2(get-input()), 4507);
